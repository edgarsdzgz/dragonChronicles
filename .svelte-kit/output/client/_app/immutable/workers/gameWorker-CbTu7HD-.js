let e,T;function $(){return{schemaVersion:4,lastTickMs:Date.now(),playtimeSec:0,currentLevel:1,totalDistance:0,levelDistance:0,levelDistanceTarget:15e3,travelState:"HOVERING",enemiesDefeated:0,bossesDefeated:0,worldMap:{unlockedLevels:[1],completedLevels:[],currentRegion:"Dragonspire Mountains",bossTimers:{}},currentLevelState:{totalEnemies:0,enemiesSpawned:0,enemiesDefeated:0,isComplete:!1,isBossLevel:!1},currencies:{steak:{key:"steak",amount:0,unlocked:!0},gold:{key:"gold",amount:0,unlocked:!1},dragonscales:{key:"dragonscales",amount:0,unlocked:!1},gems:{key:"gems",amount:0,unlocked:!1}},upgrades:{damage:0,fireRate:0,health:0,extraDragons:0},dragonStats:{maxHp:10,currentHp:10,damage:2,fireRateMultiplier:1,dragonCount:1},equippedGear:{},inventory:H(),materials:{emberdust:0,frostshards:0,stormmotes:0,venomglobules:0,emberore:0,frostmetal:0,stormsteel:0,shadowessence:0},recipes:N(),availableSets:V(),runeInventory:[]}}function W(t,a,s){return Math.max(a,Math.min(s,t))}function j(t){const a={emberdust:3,frostshards:3,stormmotes:3,venomglobules:3,emberore:.5,frostmetal:.5,stormsteel:.5,shadowessence:.2},s=1+(e.currentLevel-1)*.05,n=t/3600;Object.entries(a).forEach(([o,r])=>{const i=r*s*n,l=Math.floor(i+Math.random());l>0&&(e.materials[o]+=l)})}function U(t){e.currencies.steak.amount+=t}function I(t){return 15e3+(t-1)*3e3}function z(t){if(e.travelState!=="ADVANCING")return;const a=10,s=1+e.dragonStats.fireRateMultiplier*.1,o=a*s*t;e.levelDistance+=o,e.totalDistance+=o,e.levelDistance>=e.levelDistanceTarget&&D()}function Q(t,a){return{HOVERING:["ADVANCING","TRAVEL_TO_TARGET"],ADVANCING:["HOVERING","RETREATING","GATE"],RETREATING:["HOVERING","ADVANCING"],GATE:["HOVERING","ADVANCING"],TRAVEL_TO_TARGET:["HOVERING","ADVANCING"]}[t].includes(a)}function q(t){return Q(e.travelState,t)?(e.travelState=t,!0):!1}function J(){return q("ADVANCING")}function K(){return q("HOVERING")}function D(){const t=e.currentLevel,a=e.levelDistance-e.levelDistanceTarget;e.worldMap.completedLevels.includes(t)||e.worldMap.completedLevels.push(t),e.currentLevel++,e.worldMap.unlockedLevels.includes(e.currentLevel)||e.worldMap.unlockedLevels.push(e.currentLevel),e.levelDistance=a,e.levelDistanceTarget=I(e.currentLevel);const s=X(t);s.forEach(o=>{o.type==="currency"&&o.currencyType&&(e.currencies[o.currencyType].amount+=o.amount||0)}),L(),C();const n={type:"level:complete",newLevel:e.currentLevel,rewards:s};postMessage(n)}function X(t){const a=[],s=Math.floor(50+t*25);return a.push({type:"currency",currencyType:"steak",amount:s}),t===5&&(e.currencies.gold.unlocked=!0,a.push({type:"currency",currencyType:"gold",amount:100})),t===10&&(e.currencies.dragonscales.unlocked=!0,a.push({type:"currency",currencyType:"dragonscales",amount:10})),t===20&&(e.currencies.gems.unlocked=!0,a.push({type:"currency",currencyType:"gems",amount:5})),a}function L(){e.currentLevelState={totalEnemies:Math.floor(20+e.currentLevel*5),enemiesSpawned:0,enemiesDefeated:0,isComplete:!1,isBossLevel:e.currentLevel%10===0}}function Y(t){const a=t%10===0,s=a?1:Math.floor(3+t*.2),n=[];return a&&n.push({type:"currency",currencyType:"dragonscales",amount:Math.floor(2+t/10)}),n.push({type:"currency",currencyType:"gold",amount:Math.floor(10*Math.pow(1.08,t))}),{level:t,enemyCount:s,isBossLevel:a,completionRewards:n}}function Z(t,a=!1){const s=a?25:5,n=a?4:2,o=a?1.15:1.12,r=a?1.12:1.08;return{hp:Math.floor(s*Math.pow(o,t)),damage:Math.floor(n*Math.pow(r,t))}}function ee(){const t=Y(e.currentLevel);t.completionRewards.forEach(n=>{n.type==="currency"&&n.currencyType&&n.amount&&(e.currencies[n.currencyType].amount+=n.amount,e.currencies[n.currencyType].unlocked||(e.currencies[n.currencyType].unlocked=!0))}),e.worldMap.completedLevels.includes(e.currentLevel)||e.worldMap.completedLevels.push(e.currentLevel);const a=e.currentLevel+1;e.worldMap.unlockedLevels.includes(a)||e.worldMap.unlockedLevels.push(a),t.isBossLevel&&e.bossesDefeated++,e.currentLevel=a,e.levelProgress=0,e.enemiesDefeated=0,C(),L();const s={type:t.isBossLevel?"boss:defeated":"level:complete",newLevel:a,bossLevel:t.isBossLevel?e.currentLevel-1:void 0,rewards:t.completionRewards};return postMessage(s),!0}function te(){let t=(e.currentLevelState.enemiesSpawned||0)+1;const a=e.currentLevel,s=e.currentLevelState.isBossLevel&&e.currentLevelState.enemiesSpawned===0,n=Z(a,s);let o="normal";s&&(o="boss");const r={id:t,level:a,type:o,hp:n.hp,maxHp:n.hp,damage:n.damage,abilities:s?["charge","firebreath"]:[],lootTable:A(a,o)};return e.currentLevelState.enemiesSpawned++,r}function A(t,a){const s=[],n=a==="boss"?5:1;if(s.push({type:"currency",currencyType:"steak",amount:n}),a==="boss")s.push({type:"currency",currencyType:"dragonscales",amount:Math.floor(1+t/10)}),s.push({type:"gear",gear:G(t,a)}),s.push({type:"material",material:E(t,a)}),Math.random()<.25&&s.push({type:"rune",rune:fe(t,a)});else{const o=Math.min(.05+t*.002,.15);Math.random()<o&&s.push({type:"gear",gear:G(t,a)});const r=Math.min(.3+t*.01,.7);Math.random()<r&&s.push({type:"material",material:E(t,a)})}return s}function ae(){return!e.currentLevelState.isComplete&&e.currentLevelState.enemiesSpawned<e.currentLevelState.totalEnemies}function se(t){e.currentLevelState.enemiesDefeated++;const a=e.currentLevel,n=e.currentLevelState.isBossLevel&&e.currentLevelState.enemiesDefeated===1?"boss":"normal",o=A(a,n);return o.forEach(r=>{r.type==="currency"&&r.currencyType&&r.amount?e.currencies[r.currencyType]&&(e.currencies[r.currencyType].amount+=r.amount,e.currencies[r.currencyType].unlocked||(e.currencies[r.currencyType].unlocked=!0)):r.type==="gear"&&r.gear?e.inventory.push(r.gear):r.type==="material"&&r.material?e.materials[r.material.type]+=r.material.amount:r.type==="rune"&&r.rune&&e.runeInventory.push(r.rune)}),e.currentLevelState.enemiesDefeated>=e.currentLevelState.totalEnemies&&(e.currentLevelState.isComplete=!0,console.log(`Level ${e.currentLevel} completed! ${e.currentLevelState.enemiesDefeated}/${e.currentLevelState.totalEnemies} enemies defeated`),ee()),o}function ne(t,a){const s=e.inventory.findIndex(o=>o.id===t);if(s===-1)return!1;const n=e.inventory[s];return n.slot!==a?!1:(e.equippedGear&&e.equippedGear[a]&&e.inventory.push(e.equippedGear[a]),e.equippedGear[a]=n,e.inventory.splice(s,1),v(),!0)}function re(t){return!e.equippedGear||!e.equippedGear[t]?!1:(e.inventory.push(e.equippedGear[t]),delete e.equippedGear[t],v(),!0)}function oe(){let t={damage:0,health:0,fireRate:0,critChance:0,critDamage:0};e.equippedGear&&Object.values(e.equippedGear).forEach(s=>{if(s){const n=1+s.enhancement*.1;t.damage+=Math.floor((s.stats.damage||0)*n),t.health+=Math.floor((s.stats.health||0)*n),t.fireRate+=(s.stats.fireRate||0)*n,t.critChance+=(s.stats.critChance||0)*n,t.critDamage+=(s.stats.critDamage||0)*n,s.sockets&&s.sockets.forEach(o=>{if(o.runeId){const r=e.runeInventory.find(i=>i.id===o.runeId);r&&(t.damage+=r.stats.damage||0,t.health+=r.stats.health||0,t.fireRate+=r.stats.fireRate||0,t.critChance+=r.stats.critChance||0,t.critDamage+=r.stats.critDamage||0)}})}});const a=me();return t.damage+=a.damage||0,t.health+=a.health||0,t.fireRate+=a.fireRate||0,t.critChance+=a.critChance||0,t.critDamage+=a.critDamage||0,t}function S(){return"gear_"+Date.now()+"_"+Math.floor(Math.random()*1e3)}function H(){const t=[];return t.push({id:S(),name:"Iron Talons",rarity:"Common",slot:"claws",level:1,enhancement:0,stats:{damage:2},sockets:[],description:"Basic iron claws for a young dragon."}),t.push({id:S(),name:"Leather Crown",rarity:"Common",slot:"helm",level:1,enhancement:0,stats:{health:5},sockets:[],description:"A simple leather headpiece."}),t}function G(t,a){const s=["helm","chest","claws","tailSpike","wingGuards","charm","ring","breathFocus"],n=["Common","Rare","Epic","Legendary","Mythic"],o=s[Math.floor(Math.random()*s.length)];let r=[70,20,8,1.5,.5];a==="boss"&&(r=[30,40,20,8,2]);const i=Math.min(t*.5,20);r[0]-=i,r[1]+=i*.6,r[2]+=i*.3,r[3]+=i*.1;const l=r.reduce((m,M)=>m+M,0),c=Math.random()*l;let f=0,u="Common";for(let m=0;m<r.length;m++)if(f+=r[m],c<=f){u=n[m];break}const h={helm:["Crown","Helm","Circlet","Diadem","Cap"],chest:["Plate","Mail","Armor","Cuirass","Vest"],claws:["Talons","Claws","Blades","Rippers","Hooks"],tailSpike:["Spike","Barb","Point","Thorn","Stinger"],wingGuards:["Guards","Shields","Plates","Covers","Mantles"],charm:["Charm","Amulet","Pendant","Talisman","Ward"],ring:["Ring","Band","Loop","Circle","Signet"],breathFocus:["Focus","Orb","Crystal","Stone","Lens"]},p={Common:["Crude","Simple","Basic","Plain","Worn"],Rare:["Fine","Quality","Polished","Sturdy","Sharp"],Epic:["Masterwork","Superior","Gleaming","Powerful","Enchanted"],Legendary:["Ancient","Legendary","Mythical","Celestial","Divine"],Mythic:["Godlike","Primordial","Eternal","Transcendent","Ultimate"]},g=h[o][Math.floor(Math.random()*h[o].length)],b=p[u][Math.floor(Math.random()*p[u].length)],y={},k={Common:1,Rare:1.5,Epic:2.5,Legendary:4,Mythic:6}[u];if(["claws","tailSpike"].includes(o)&&(y.damage=Math.floor((2+t*.3)*k)),["helm","chest","wingGuards"].includes(o)&&(y.health=Math.floor((3+t*.5)*k)),["ring","charm","breathFocus"].includes(o)&&(y.fireRate=(.1+t*.01)*k),u!=="Common"){const m={Rare:.3,Epic:.5,Legendary:.7,Mythic:.9}[u]||0;Math.random()<m&&!y.damage&&(y.damage=Math.floor((1+t*.1)*k*.5)),Math.random()<m&&!y.health&&(y.health=Math.floor((2+t*.2)*k*.5))}let R;const O={Common:.05,Rare:.15,Epic:.25,Legendary:.4,Mythic:.6}[u]||0;if(Math.random()<O){const m=e.availableSets.filter(M=>M.pieces.includes(o));m.length>0&&(R=m[Math.floor(Math.random()*m.length)].id)}const _={Common:0,Rare:1,Epic:2,Legendary:3,Mythic:4}[u]||0,F=.3+t*.01,w=[];for(let m=0;m<_;m++)if(Math.random()<F){const M=["damage","defense","utility"];w.push({id:`socket_${m}`,socketType:M[Math.floor(Math.random()*M.length)]})}return{id:S(),name:`${b} ${g}`,rarity:u,slot:o,level:Math.max(1,t+Math.floor((Math.random()-.5)*4)),enhancement:0,stats:y,setId:R,sockets:w,description:`Level ${t} ${u} equipment found in combat.`}}function E(t,a){let s,n;a==="boss"?(s=["emberdust","frostshards","stormmotes","venomglobules","emberore","frostmetal","stormsteel","shadowessence"],n=[40,35,25]):(s=["emberdust","frostshards","stormmotes","venomglobules"],n=[70,25,5]);const o=s[Math.floor(Math.random()*s.length)],r=n.reduce((p,g)=>p+g,0),i=Math.random()*r;let l=0,c="Common";const f=["Common","Rare","Epic"];for(let p=0;p<n.length;p++)if(l+=n[p],i<=l){c=f[p];break}const u={Common:1+Math.floor(t*.1),Rare:1+Math.floor(t*.05),Epic:1+Math.floor(t*.02)}[c];return{type:o,amount:Math.max(1,u*(a==="boss"?2:1)),rarity:c}}function x(t){const a={Common:1,Rare:1.5,Epic:2,Legendary:3,Mythic:5},s=100,n=a[t.rarity]||1;return Math.floor(s*n*Math.pow(1.25,t.enhancement))}function ie(t){if(t.enhancement>=25)return!1;const a=x(t);return e.currencies.forgegold.amount>=a}function ce(t,a){var r;let s,n=!1;if(a&&((r=e.equippedGear[a])==null?void 0:r.id)===t?(s=e.equippedGear[a],n=!0):(s=e.inventory.find(i=>i.id===t),n=!1),!s||!ie(s))return!1;const o=x(s);return e.currencies.forgegold.amount-=o,s.enhancement++,n&&v(),!0}function N(){return[{id:"iron_helm",name:"Iron Crown",slot:"helm",targetRarity:"Common",requiredLevel:1,materials:[{type:"emberdust",amount:3},{type:"frostshards",amount:2}],baseStats:{health:8},unlocked:!0},{id:"iron_claws",name:"Iron Talons",slot:"claws",targetRarity:"Common",requiredLevel:1,materials:[{type:"emberdust",amount:2},{type:"stormmotes",amount:2}],baseStats:{damage:4},unlocked:!0},{id:"steel_chest",name:"Steel Plate",slot:"chest",targetRarity:"Rare",requiredLevel:5,materials:[{type:"emberore",amount:1},{type:"frostmetal",amount:1},{type:"emberdust",amount:10}],baseStats:{health:15,damage:2},unlocked:!1},{id:"storm_ring",name:"Storm Band",slot:"ring",targetRarity:"Rare",requiredLevel:8,materials:[{type:"stormsteel",amount:1},{type:"stormmotes",amount:8},{type:"frostshards",amount:5}],baseStats:{fireRate:.8,damage:3},unlocked:!1},{id:"shadow_focus",name:"Shadow Orb",slot:"breathFocus",targetRarity:"Epic",requiredLevel:12,materials:[{type:"shadowessence",amount:2},{type:"emberore",amount:2},{type:"stormsteel",amount:1}],baseStats:{fireRate:1.2,damage:8},unlocked:!1}]}function C(){e.recipes.forEach(t=>{!t.unlocked&&e.currentLevel>=t.requiredLevel&&(t.unlocked=!0)})}function le(t){return e.currentLevel<t.requiredLevel?!1:t.materials.every(a=>e.materials[a.type]>=a.amount)}function ue(t){const a=e.recipes.find(n=>n.id===t);if(!a||!a.unlocked||!le(a))return!1;a.materials.forEach(n=>{e.materials[n.type]-=n.amount});const s={id:S(),name:a.name,rarity:a.targetRarity,slot:a.slot,level:e.currentLevel,enhancement:0,stats:{...a.baseStats},sockets:[],description:`Crafted ${a.targetRarity} equipment made with precision.`};return e.inventory.push(s),!0}function V(){return[{id:"dragonfire_set",name:"Dragonfire Regalia",description:"Ancient armor forged in dragonflame, enhances offensive capabilities.",pieces:["helm","chest","claws","breathFocus"],bonuses:[{pieces:2,stats:{damage:5,fireRate:.1},description:"Dragon's Fury: +5 Damage, +0.1 Fire Rate"},{pieces:4,stats:{damage:15,fireRate:.3,critChance:.1},description:"Infernal Might: +15 Damage, +0.3 Fire Rate, +10% Crit Chance"}]},{id:"stormguard_set",name:"Stormguard Armor",description:"Lightning-infused protection that amplifies defensive power.",pieces:["helm","chest","wingGuards","tailSpike"],bonuses:[{pieces:2,stats:{health:20,fireRate:.05},description:"Storm Shield: +20 Health, +0.05 Fire Rate"},{pieces:4,stats:{health:50,damage:8,fireRate:.15},description:"Tempest Guard: +50 Health, +8 Damage, +0.15 Fire Rate"}]},{id:"shadowweave_set",name:"Shadowweave Collection",description:"Mystical accessories that enhance critical strike power.",pieces:["charm","ring","breathFocus","wingGuards"],bonuses:[{pieces:2,stats:{critChance:.08,critDamage:.2},description:"Shadow Strike: +8% Crit Chance, +20% Crit Damage"},{pieces:4,stats:{critChance:.2,critDamage:.6,damage:10},description:"Void Mastery: +20% Crit Chance, +60% Crit Damage, +10 Damage"}]}]}function de(){const t={},a=[];return e.equippedGear&&Object.values(e.equippedGear).forEach(s=>{s&&s.setId&&(t[s.setId]=(t[s.setId]||0)+1)}),Object.entries(t).forEach(([s,n])=>{const o=e.availableSets.find(r=>r.id===s);if(o){const r=o.bonuses.filter(i=>n>=i.pieces);r.length>0&&a.push({setId:s,activePieces:n,bonuses:r})}}),a}function me(){const t={damage:0,health:0,fireRate:0,critChance:0,critDamage:0};return de().forEach(s=>{const n=s.bonuses[s.bonuses.length-1];n&&n.stats&&(t.damage+=n.stats.damage||0,t.health+=n.stats.health||0,t.fireRate+=n.stats.fireRate||0,t.critChance+=n.stats.critChance||0,t.critDamage+=n.stats.critDamage||0)}),t}function fe(t,a){const s=["strength","vitality","agility","focus","fortune"],n=["Lesser","Greater","Perfect"];let o=[70,25,5];a==="boss"&&(o=[40,45,15]);const r=o.reduce((g,b)=>g+b,0),i=Math.random()*r;let l=0,c="Lesser";for(let g=0;g<o.length;g++)if(l+=o[g],i<=l){c=n[g];break}const f=s[Math.floor(Math.random()*s.length)],u={Lesser:1,Greater:2,Perfect:4}[c],h={};switch(f){case"strength":h.damage=Math.floor((2+t*.2)*u);break;case"vitality":h.health=Math.floor((5+t*.3)*u);break;case"agility":h.fireRate=(.05+t*.01)*u;break;case"focus":h.critChance=(.02+t*.001)*u,h.critDamage=(.05+t*.002)*u;break;case"fortune":h.forgegoldFind=(.1+t*.01)*u,h.dragonScaleFind=(.05+t*.005)*u;break}const p=[];switch(f){case"strength":case"focus":p.push("damage");break;case"vitality":p.push("defense");break;case"agility":p.push("damage","utility");break;case"fortune":p.push("utility");break}return{id:"rune_"+Date.now()+"_"+Math.floor(Math.random()*1e3),name:`${c} Rune of ${f.charAt(0).toUpperCase()+f.slice(1)}`,type:f,rarity:c,level:Math.max(1,t+Math.floor((Math.random()-.5)*6)),stats:h,socketTypes:p,description:`A ${c.toLowerCase()} rune that enhances ${f} abilities.`}}function pe(t,a,s){let n,o=!1;if(e.equippedGear){for(const[c,f]of Object.entries(e.equippedGear))if(f&&f.id===t){n=f,o=!0;break}}if(n||(n=e.inventory.find(c=>c.id===t),o=!1),!n||!n.sockets||s>=n.sockets.length)return!1;const r=e.runeInventory.findIndex(c=>c.id===a);if(r===-1)return!1;const i=e.runeInventory[r],l=n.sockets[s];return!i.socketTypes.includes(l.socketType)||l.runeId?!1:(l.runeId=a,e.runeInventory.splice(r,1),o&&v(),!0)}function he(t,a){let s,n=!1;if(e.equippedGear){for(const[r,i]of Object.entries(e.equippedGear))if(i&&i.id===t){s=i,n=!0;break}}if(s||(s=e.inventory.find(r=>r.id===t),n=!1),!s||!s.sockets||a>=s.sockets.length)return!1;const o=s.sockets[a];return o.runeId?(o.runeId=void 0,n&&v(),!0):!1}function B(t,a){const n={damage:5,fireRate:8,health:12,extraDragons:500}[t];return t==="extraDragons"?n*Math.pow(a+1,2):Math.floor(n*Math.pow(a+1,1.5))}function ge(t){const a=e.upgrades[t],s=B(t,a);return e.currencies.copper.amount>=s}function ye(t){if(!ge(t))return!1;const a=e.upgrades[t],s=B(t,a);return e.currencies.copper.amount-=s,e.upgrades[t]++,v(),!0}function v(){const t=e.upgrades,a=2,s=10,n=1,o=oe();e.dragonStats.damage=a+t.damage*2+o.damage,e.dragonStats.maxHp=s+t.health*8+o.health,e.dragonStats.fireRateMultiplier=n+t.fireRate*.3+o.fireRate*.1,e.dragonStats.dragonCount=1+t.extraDragons,(e.dragonStats.currentHp>e.dragonStats.maxHp||t.health>0)&&(e.dragonStats.currentHp=e.dragonStats.maxHp)}function d(){postMessage({type:"state:update",state:e})}function P(t){e.playtimeSec+=t,j(t),z(t)}function ve(){T||(T=setInterval(()=>{const t=Date.now(),s=(t-e.lastTickMs)/1e3;s>0&&(P(s),e.lastTickMs=t,d())},1e3))}self.onmessage=t=>{var s,n,o,r;const a=t.data;if(a.type==="init"){if(e=a.state??$(),!e.schemaVersion||e.schemaVersion<3){e.currentLevel=e.currentLevel??1;const c=e.levelProgress??0;e.totalDistance=e.totalDistance??0,e.levelDistance=e.levelDistance??Math.floor(c*15e3),e.levelDistanceTarget=e.levelDistanceTarget??I(e.currentLevel),e.enemiesDefeated=e.enemiesDefeated??0,e.bossesDefeated=e.bossesDefeated??0,e.worldMap=e.worldMap??{unlockedLevels:[1],completedLevels:[],currentRegion:"Dragonspire Mountains",bossTimers:{}},e.currentLevelState=e.currentLevelState??{totalEnemies:0,enemiesSpawned:0,enemiesDefeated:0,isComplete:!1,isBossLevel:!1},e.currencies.forgegold||(e.currencies.forgegold={key:"forgegold",amount:0,unlocked:!1}),e.currencies.dragonscales||(e.currencies.dragonscales={key:"dragonscales",amount:0,unlocked:!1}),e.currencies.gems||(e.currencies.gems={key:"gems",amount:0,unlocked:!1}),e.equippedGear=e.equippedGear??{},e.inventory=e.inventory??[],e.inventory.length===0&&Object.keys(e.equippedGear).length===0&&(e.inventory=H()),e.materials=e.materials??{emberdust:0,frostshards:0,stormmotes:0,venomglobules:0,emberore:0,frostmetal:0,stormsteel:0,shadowessence:0},e.recipes=e.recipes??N(),e.availableSets=e.availableSets??V(),e.runeInventory=e.runeInventory??[],e.schemaVersion=3}if(e.upgrades||(e.upgrades={damage:0,fireRate:0,health:0,extraDragons:0}),e.dragonStats||(e.dragonStats={maxHp:10,currentHp:10,damage:2,fireRateMultiplier:1,dragonCount:1}),e.equippedGear||(e.equippedGear={}),e.inventory||(e.inventory=[]),e.currentLevelState||(e.currentLevelState={totalEnemies:0,enemiesSpawned:0,enemiesDefeated:0,isComplete:!1,isBossLevel:!1}),e.schemaVersion===3){const c=e.currencies;e.currencies={steak:{key:"steak",amount:((s=c.copper)==null?void 0:s.amount)||0,unlocked:((n=c.copper)==null?void 0:n.unlocked)||!0},gold:{key:"gold",amount:((o=c.forgegold)==null?void 0:o.amount)||0,unlocked:((r=c.forgegold)==null?void 0:r.unlocked)||!1},dragonscales:c.dragonscales||{key:"dragonscales",amount:0,unlocked:!1},gems:c.gems||{key:"gems",amount:0,unlocked:!1}},e.schemaVersion=4}e.travelState||(e.travelState="HOVERING"),v(),C(),(!e.currentLevelState||e.currentLevelState.totalEnemies===0)&&L();const i=Date.now()-e.lastTickMs,l=W(Math.floor(i/1e3),0,24*60*60);l>0&&(P(l),e.lastTickMs=Date.now()),d(),ve()}if(a.type==="request-save"&&d(),a.type==="ping"&&postMessage({type:"pong"}),a.type==="add-steak"&&(U(a.amount),e.lastTickMs=Date.now(),d()),a.type==="purchase-upgrade"&&ye(a.upgradeType)&&(e.lastTickMs=Date.now(),d()),a.type==="advance-level"&&(D(),e.lastTickMs=Date.now(),d()),a.type==="complete-level"&&(D(),e.lastTickMs=Date.now(),d()),a.type==="spawn-enemy"){if(ae()){const l={type:"enemy:spawn",enemy:te()};postMessage(l)}e.lastTickMs=Date.now(),d()}if(a.type==="enemy-defeated"){const l={type:"enemy:defeated",rewards:se(a.enemyId)};postMessage(l),e.lastTickMs=Date.now(),d()}a.type==="select-level"&&(e.worldMap.unlockedLevels.includes(a.level)&&(e.currentLevel=a.level,L()),e.lastTickMs=Date.now(),d()),a.type==="equip-gear"&&ne(a.gearId,a.slot)&&(e.lastTickMs=Date.now(),d()),a.type==="unequip-gear"&&re(a.slot)&&(e.lastTickMs=Date.now(),d()),a.type==="enhance-gear"&&ce(a.gearId,a.slot)&&(e.lastTickMs=Date.now(),d()),a.type==="craft-gear"&&ue(a.recipeId)&&(e.lastTickMs=Date.now(),d()),a.type==="socket-rune"&&pe(a.gearId,a.runeId,a.socketIndex)&&(e.lastTickMs=Date.now(),d()),a.type==="unsocket-rune"&&he(a.gearId,a.socketIndex)&&(e.lastTickMs=Date.now(),d()),a.type==="start-travel"&&J()&&(e.lastTickMs=Date.now(),d()),a.type==="stop-travel"&&K()&&(e.lastTickMs=Date.now(),d())};

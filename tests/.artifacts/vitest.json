{
  "numTotalTestSuites": 123,
  "numPassedTestSuites": 123,
  "numFailedTestSuites": 0,
  "numPendingTestSuites": 0,
  "numTotalTests": 340,
  "numPassedTests": 340,
  "numFailedTests": 0,
  "numPendingTests": 0,
  "numTodoTests": 0,
  "snapshot": {
    "added": 0,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0,
    "didUpdate": false
  },
  "startTime": 1760137232642,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Atomic Write Operations", "putSaveAtomic"],
          "fullName": "Atomic Write Operations putSaveAtomic should write save data atomically",
          "status": "passed",
          "title": "should write save data atomically",
          "duration": 42.06498300000021,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "putSaveAtomic"],
          "fullName": "Atomic Write Operations putSaveAtomic should update active profile pointer",
          "status": "passed",
          "title": "should update active profile pointer",
          "duration": 7.416584999999941,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "putSaveAtomic"],
          "fullName": "Atomic Write Operations putSaveAtomic should prune old saves to keep only 3 backups",
          "status": "passed",
          "title": "should prune old saves to keep only 3 backups",
          "duration": 17.51297999999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "putSaveAtomic"],
          "fullName": "Atomic Write Operations putSaveAtomic should handle concurrent writes to different profiles",
          "status": "passed",
          "title": "should handle concurrent writes to different profiles",
          "duration": 5.928266999999778,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "putSaveAtomic"],
          "fullName": "Atomic Write Operations putSaveAtomic should maintain data integrity during transaction failures",
          "status": "passed",
          "title": "should maintain data integrity during transaction failures",
          "duration": 5.477720999999747,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "getActiveSave"],
          "fullName": "Atomic Write Operations getActiveSave should return the most recent save for a profile",
          "status": "passed",
          "title": "should return the most recent save for a profile",
          "duration": 8.22562599999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "getActiveSave"],
          "fullName": "Atomic Write Operations getActiveSave should return null for non-existent profile",
          "status": "passed",
          "title": "should return null for non-existent profile",
          "duration": 3.6529090000003634,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "getActiveSave"],
          "fullName": "Atomic Write Operations getActiveSave should handle profile with multiple saves correctly",
          "status": "passed",
          "title": "should handle profile with multiple saves correctly",
          "duration": 14.07671900000014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "Database consistency"],
          "fullName": "Atomic Write Operations Database consistency should maintain referential integrity between saves and meta tables",
          "status": "passed",
          "title": "should maintain referential integrity between saves and meta tables",
          "duration": 7.679188999999951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "Database consistency"],
          "fullName": "Atomic Write Operations Database consistency should handle database corruption gracefully",
          "status": "passed",
          "title": "should handle database corruption gracefully",
          "duration": 6.973721000000296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "W3 time accounting integration"],
          "fullName": "Atomic Write Operations W3 time accounting integration should preserve W3 time accounting fields during atomic writes",
          "status": "passed",
          "title": "should preserve W3 time accounting fields during atomic writes",
          "duration": 3.540324999999939,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Atomic Write Operations", "W3 time accounting integration"],
          "fullName": "Atomic Write Operations W3 time accounting integration should handle W3 time accounting updates correctly",
          "status": "passed",
          "title": "should handle W3 time accounting updates correctly",
          "duration": 3.69222899999977,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235698,
      "endTime": 1760137235825.6921,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/db/atomic.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Export/Import Functionality", "exportAllProfiles"],
          "fullName": "Export/Import Functionality exportAllProfiles should export all profiles with correct format",
          "status": "passed",
          "title": "should export all profiles with correct format",
          "duration": 45.473795999999766,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "exportAllProfiles"],
          "fullName": "Export/Import Functionality exportAllProfiles should include W3 time accounting fields in export",
          "status": "passed",
          "title": "should include W3 time accounting fields in export",
          "duration": 5.49483199999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "exportAllProfiles"],
          "fullName": "Export/Import Functionality exportAllProfiles should generate valid checksum for export data",
          "status": "passed",
          "title": "should generate valid checksum for export data",
          "duration": 5.290895999999975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "exportAllProfiles"],
          "fullName": "Export/Import Functionality exportAllProfiles should handle empty database gracefully",
          "status": "passed",
          "title": "should handle empty database gracefully",
          "duration": 3.4046220000000176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "importFromBlob"],
          "fullName": "Export/Import Functionality importFromBlob should import valid export data correctly",
          "status": "passed",
          "title": "should import valid export data correctly",
          "duration": 16.316949000000022,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "importFromBlob"],
          "fullName": "Export/Import Functionality importFromBlob should validate checksum during import",
          "status": "passed",
          "title": "should validate checksum during import",
          "duration": 3.09704099999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "importFromBlob"],
          "fullName": "Export/Import Functionality importFromBlob should reject import with wrong file version",
          "status": "passed",
          "title": "should reject import with wrong file version",
          "duration": 3.480750000000171,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "importFromBlob"],
          "fullName": "Export/Import Functionality importFromBlob should handle corrupted export data gracefully",
          "status": "passed",
          "title": "should handle corrupted export data gracefully",
          "duration": 2.8103430000001026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "importFromBlob"],
          "fullName": "Export/Import Functionality importFromBlob should preserve W3 time accounting during import",
          "status": "passed",
          "title": "should preserve W3 time accounting during import",
          "duration": 15.510281000000305,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Round-trip data integrity"],
          "fullName": "Export/Import Functionality Round-trip data integrity should maintain data integrity through export-import cycle",
          "status": "passed",
          "title": "should maintain data integrity through export-import cycle",
          "duration": 12.048947999999655,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Round-trip data integrity"],
          "fullName": "Export/Import Functionality Round-trip data integrity should preserve all profile data during round-trip",
          "status": "passed",
          "title": "should preserve all profile data during round-trip",
          "duration": 8.64006500000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Codec functions"],
          "fullName": "Export/Import Functionality Codec functions should encode and validate export data correctly",
          "status": "passed",
          "title": "should encode and validate export data correctly",
          "duration": 4.131322000000182,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Codec functions"],
          "fullName": "Export/Import Functionality Codec functions should detect tampered export data",
          "status": "passed",
          "title": "should detect tampered export data",
          "duration": 4.273239000000103,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Codec functions"],
          "fullName": "Export/Import Functionality Codec functions should handle checksum generation consistently",
          "status": "passed",
          "title": "should handle checksum generation consistently",
          "duration": 2.2046800000002804,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Multiple profile handling"],
          "fullName": "Export/Import Functionality Multiple profile handling should handle multiple profile pointers correctly",
          "status": "passed",
          "title": "should handle multiple profile pointers correctly",
          "duration": 12.166699999999764,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Export/Import Functionality", "Multiple profile handling"],
          "fullName": "Export/Import Functionality Multiple profile handling should maintain profile independence during import",
          "status": "passed",
          "title": "should maintain profile independence during import",
          "duration": 8.987314999999853,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235699,
      "endTime": 1760137235852.9873,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/db/export-import.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Migration System", "Database Version Management"],
          "fullName": "Migration System Database Version Management should return version 1 for new database",
          "status": "passed",
          "title": "should return version 1 for new database",
          "duration": 27.89788899999985,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Database Version Management"],
          "fullName": "Migration System Database Version Management should track database version in meta table",
          "status": "passed",
          "title": "should track database version in meta table",
          "duration": 7.841989000000012,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Database Version Management"],
          "fullName": "Migration System Database Version Management should handle missing version gracefully",
          "status": "passed",
          "title": "should handle missing version gracefully",
          "duration": 3.336387000000286,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Status"],
          "fullName": "Migration System Migration Status should return correct migration status for fresh database",
          "status": "passed",
          "title": "should return correct migration status for fresh database",
          "duration": 3.839314999999715,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Status"],
          "fullName": "Migration System Migration Status should handle database with version set",
          "status": "passed",
          "title": "should handle database with version set",
          "duration": 3.4599370000000818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Execution"],
          "fullName": "Migration System Migration Execution should handle no migrations needed",
          "status": "passed",
          "title": "should handle no migrations needed",
          "duration": 2.7105400000000373,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Execution"],
          "fullName": "Migration System Migration Execution should complete successfully when no data exists",
          "status": "passed",
          "title": "should complete successfully when no data exists",
          "duration": 4.022997000000032,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Execution"],
          "fullName": "Migration System Migration Execution should handle migration with existing data",
          "status": "passed",
          "title": "should handle migration with existing data",
          "duration": 10.659385999999813,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Validation"],
          "fullName": "Migration System Migration Validation should validate empty database successfully",
          "status": "passed",
          "title": "should validate empty database successfully",
          "duration": 3.9334609999996246,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Validation"],
          "fullName": "Migration System Migration Validation should validate valid save data",
          "status": "passed",
          "title": "should validate valid save data",
          "duration": 3.751803999999993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Validation"],
          "fullName": "Migration System Migration Validation should detect invalid save data structure",
          "status": "passed",
          "title": "should detect invalid save data structure",
          "duration": 3.1211370000000898,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Validation"],
          "fullName": "Migration System Migration Validation should detect missing required fields",
          "status": "passed",
          "title": "should detect missing required fields",
          "duration": 2.9716769999999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Backup"],
          "fullName": "Migration System Migration Backup should create backup successfully for empty database",
          "status": "passed",
          "title": "should create backup successfully for empty database",
          "duration": 2.959385000000111,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Backup"],
          "fullName": "Migration System Migration Backup should create backup with save data",
          "status": "passed",
          "title": "should create backup with save data",
          "duration": 5.405365999999958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Backup"],
          "fullName": "Migration System Migration Backup should store backup in meta table",
          "status": "passed",
          "title": "should store backup in meta table",
          "duration": 8.859645999999884,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Migration Backup"],
          "fullName": "Migration System Migration Backup should not backup other backups",
          "status": "passed",
          "title": "should not backup other backups",
          "duration": 7.903866999999991,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Integration Tests"],
          "fullName": "Migration System Integration Tests should handle complete migration workflow",
          "status": "passed",
          "title": "should handle complete migration workflow",
          "duration": 5.20631800000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Migration System", "Integration Tests"],
          "fullName": "Migration System Integration Tests should maintain data integrity through migration process",
          "status": "passed",
          "title": "should maintain data integrity through migration process",
          "duration": 7.033436000000165,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235699,
      "endTime": 1760137235816.0334,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/db/migrate.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Schema Validation", "ProfileV1 validation"],
          "fullName": "Schema Validation ProfileV1 validation should validate a complete valid profile",
          "status": "passed",
          "title": "should validate a complete valid profile",
          "duration": 6.871124000000009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ProfileV1 validation"],
          "fullName": "Schema Validation ProfileV1 validation should reject profile with missing W3 time accounting fields",
          "status": "passed",
          "title": "should reject profile with missing W3 time accounting fields",
          "duration": 2.397721000000047,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ProfileV1 validation"],
          "fullName": "Schema Validation ProfileV1 validation should reject profile with invalid W3 time accounting",
          "status": "passed",
          "title": "should reject profile with invalid W3 time accounting",
          "duration": 0.7177589999998872,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ProfileV1 validation"],
          "fullName": "Schema Validation ProfileV1 validation should reject profile with invalid name length",
          "status": "passed",
          "title": "should reject profile with invalid name length",
          "duration": 0.7507929999999305,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ProfileV1 validation"],
          "fullName": "Schema Validation ProfileV1 validation should reject profile with negative progress values",
          "status": "passed",
          "title": "should reject profile with negative progress values",
          "duration": 0.6297590000001492,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ProfileV1 validation"],
          "fullName": "Schema Validation ProfileV1 validation should reject profile with non-integer values",
          "status": "passed",
          "title": "should reject profile with non-integer values",
          "duration": 0.6146730000000389,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "SaveV1 validation"],
          "fullName": "Schema Validation SaveV1 validation should validate a complete valid save",
          "status": "passed",
          "title": "should validate a complete valid save",
          "duration": 1.3455619999999726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "SaveV1 validation"],
          "fullName": "Schema Validation SaveV1 validation should reject save with wrong version",
          "status": "passed",
          "title": "should reject save with wrong version",
          "duration": 0.5951869999998962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "SaveV1 validation"],
          "fullName": "Schema Validation SaveV1 validation should reject save with no profiles",
          "status": "passed",
          "title": "should reject save with no profiles",
          "duration": 0.616559000000052,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "SaveV1 validation"],
          "fullName": "Schema Validation SaveV1 validation should reject save with too many profiles",
          "status": "passed",
          "title": "should reject save with too many profiles",
          "duration": 1.10670499999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "SaveV1 validation"],
          "fullName": "Schema Validation SaveV1 validation should reject save with invalid profile",
          "status": "passed",
          "title": "should reject save with invalid profile",
          "duration": 0.688425000000052,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ExportFileV1 validation"],
          "fullName": "Schema Validation ExportFileV1 validation should validate a complete valid export file",
          "status": "passed",
          "title": "should validate a complete valid export file",
          "duration": 0.9230919999999969,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ExportFileV1 validation"],
          "fullName": "Schema Validation ExportFileV1 validation should reject export with wrong file version",
          "status": "passed",
          "title": "should reject export with wrong file version",
          "duration": 0.5014599999999518,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ExportFileV1 validation"],
          "fullName": "Schema Validation ExportFileV1 validation should reject export with empty checksum",
          "status": "passed",
          "title": "should reject export with empty checksum",
          "duration": 0.444189999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "ExportFileV1 validation"],
          "fullName": "Schema Validation ExportFileV1 validation should reject export with invalid data",
          "status": "passed",
          "title": "should reject export with invalid data",
          "duration": 0.42295899999999165,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should validate a complete valid save row",
          "status": "passed",
          "title": "should validate a complete valid save row",
          "duration": 1.0999300000000858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should validate save row with optional id",
          "status": "passed",
          "title": "should validate save row with optional id",
          "duration": 0.4888189999999213,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should reject save row with invalid profile id",
          "status": "passed",
          "title": "should reject save row with invalid profile id",
          "duration": 0.5856890000000021,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should validate a complete valid meta row",
          "status": "passed",
          "title": "should validate a complete valid meta row",
          "duration": 0.5862480000000687,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should reject meta row with empty key",
          "status": "passed",
          "title": "should reject meta row with empty key",
          "duration": 0.4603239999999005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should validate a complete valid log row",
          "status": "passed",
          "title": "should validate a complete valid log row",
          "duration": 0.6784379999999146,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should validate log row with optional id",
          "status": "passed",
          "title": "should validate log row with optional id",
          "duration": 0.3018539999998211,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should validate log row with optional data",
          "status": "passed",
          "title": "should validate log row with optional data",
          "duration": 0.6169080000001941,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should reject log row with invalid level",
          "status": "passed",
          "title": "should reject log row with invalid level",
          "duration": 0.4560639999999694,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should reject log row with invalid source",
          "status": "passed",
          "title": "should reject log row with invalid source",
          "duration": 0.3179169999998521,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Schema Validation", "Database row validation"],
          "fullName": "Schema Validation Database row validation should reject log row with empty message",
          "status": "passed",
          "title": "should reject log row with empty message",
          "duration": 0.3004569999998239,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235112,
      "endTime": 1760137235138.3005,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/db/schema.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should initialize with zero balance",
          "status": "passed",
          "title": "should initialize with zero balance",
          "duration": 4.039898999999878,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should drop Arcana correctly",
          "status": "passed",
          "title": "should drop Arcana correctly",
          "duration": 2.75921900000003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should calculate drop amounts correctly",
          "status": "passed",
          "title": "should calculate drop amounts correctly",
          "duration": 0.4650730000003023,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should handle distance scaling",
          "status": "passed",
          "title": "should handle distance scaling",
          "duration": 0.2848119999998744,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should handle ward scaling",
          "status": "passed",
          "title": "should handle ward scaling",
          "duration": 0.5786349999998492,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should handle combined distance and ward scaling",
          "status": "passed",
          "title": "should handle combined distance and ward scaling",
          "duration": 0.5990280000000894,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should spend Arcana correctly",
          "status": "passed",
          "title": "should spend Arcana correctly",
          "duration": 1.6644579999997404,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should reset for new journey",
          "status": "passed",
          "title": "should reset for new journey",
          "duration": 1.4145650000000387,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should track drop history",
          "status": "passed",
          "title": "should track drop history",
          "duration": 1.5513850000002094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should get journey statistics",
          "status": "passed",
          "title": "should get journey statistics",
          "duration": 2.2094990000000507,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should filter drops by source type",
          "status": "passed",
          "title": "should filter drops by source type",
          "duration": 1.3375299999997878,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Drop Manager"],
          "fullName": "Arcana Drop System Arcana Drop Manager should calculate total drops by source type",
          "status": "passed",
          "title": "should calculate total drops by source type",
          "duration": 0.9750540000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Scaling System"],
          "fullName": "Arcana Drop System Arcana Scaling System should calculate distance scaling factor",
          "status": "passed",
          "title": "should calculate distance scaling factor",
          "duration": 0.44991699999991397,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Scaling System"],
          "fullName": "Arcana Drop System Arcana Scaling System should calculate ward scaling factor",
          "status": "passed",
          "title": "should calculate ward scaling factor",
          "duration": 0.34774000000015803,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Scaling System"],
          "fullName": "Arcana Drop System Arcana Scaling System should calculate total scaling factor",
          "status": "passed",
          "title": "should calculate total scaling factor",
          "duration": 0.21525100000008024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Scaling System"],
          "fullName": "Arcana Drop System Arcana Scaling System should calculate drop amounts for different enemy types",
          "status": "passed",
          "title": "should calculate drop amounts for different enemy types",
          "duration": 0.35158099999989645,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Arcana Scaling System"],
          "fullName": "Arcana Drop System Arcana Scaling System should apply scaling correctly",
          "status": "passed",
          "title": "should apply scaling correctly",
          "duration": 0.26497799999970084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Performance Tests"],
          "fullName": "Arcana Drop System Performance Tests should handle many drops efficiently",
          "status": "passed",
          "title": "should handle many drops efficiently",
          "duration": 68.37279600000011,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Performance Tests"],
          "fullName": "Arcana Drop System Performance Tests should handle scaling calculations efficiently",
          "status": "passed",
          "title": "should handle scaling calculations efficiently",
          "duration": 1.4950220000000627,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Edge Cases"],
          "fullName": "Arcana Drop System Edge Cases should handle zero amounts gracefully",
          "status": "passed",
          "title": "should handle zero amounts gracefully",
          "duration": 0.31365699999969365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Edge Cases"],
          "fullName": "Arcana Drop System Edge Cases should handle negative amounts gracefully",
          "status": "passed",
          "title": "should handle negative amounts gracefully",
          "duration": 0.43434300000035364,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Edge Cases"],
          "fullName": "Arcana Drop System Edge Cases should handle spending more than available",
          "status": "passed",
          "title": "should handle spending more than available",
          "duration": 0.8478730000001633,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Arcana Drop System", "Edge Cases"],
          "fullName": "Arcana Drop System Edge Cases should handle spending zero amount",
          "status": "passed",
          "title": "should handle spending zero amount",
          "duration": 0.6377900000002228,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235117,
      "endTime": 1760137235210.6377,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/arcana-drop.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Balance Analyzer", "Initialization"],
          "fullName": "Balance Analyzer Initialization should create analyzer with default configuration",
          "status": "passed",
          "title": "should create analyzer with default configuration",
          "duration": 5.207715000000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Initialization"],
          "fullName": "Balance Analyzer Initialization should create analyzer with custom configuration",
          "status": "passed",
          "title": "should create analyzer with custom configuration",
          "duration": 0.5242289999998775,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Balance Analysis"],
          "fullName": "Balance Analyzer Balance Analysis should perform comprehensive balance analysis",
          "status": "passed",
          "title": "should perform comprehensive balance analysis",
          "duration": 2.0617839999999887,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Balance Analysis"],
          "fullName": "Balance Analyzer Balance Analysis should analyze progression curves",
          "status": "passed",
          "title": "should analyze progression curves",
          "duration": 1.7363240000001952,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Balance Analysis"],
          "fullName": "Balance Analyzer Balance Analysis should analyze performance metrics",
          "status": "passed",
          "title": "should analyze performance metrics",
          "duration": 0.8994159999999738,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Balance Analysis"],
          "fullName": "Balance Analyzer Balance Analysis should analyze economic efficiency",
          "status": "passed",
          "title": "should analyze economic efficiency",
          "duration": 0.6141139999999723,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Balance Analysis"],
          "fullName": "Balance Analyzer Balance Analysis should generate prioritized recommendations",
          "status": "passed",
          "title": "should generate prioritized recommendations",
          "duration": 1.8432510000000093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Progression Curve Analysis"],
          "fullName": "Balance Analyzer Progression Curve Analysis should handle empty data gracefully",
          "status": "passed",
          "title": "should handle empty data gracefully",
          "duration": 0.9732380000000376,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Progression Curve Analysis"],
          "fullName": "Balance Analyzer Progression Curve Analysis should analyze increasing progression curve",
          "status": "passed",
          "title": "should analyze increasing progression curve",
          "duration": 0.6468700000000354,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Progression Curve Analysis"],
          "fullName": "Balance Analyzer Progression Curve Analysis should analyze decreasing progression curve",
          "status": "passed",
          "title": "should analyze decreasing progression curve",
          "duration": 0.6273839999998927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Progression Curve Analysis"],
          "fullName": "Balance Analyzer Progression Curve Analysis should calculate consistency correctly",
          "status": "passed",
          "title": "should calculate consistency correctly",
          "duration": 0.5010419999998703,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Performance Analysis"],
          "fullName": "Balance Analyzer Performance Analysis should handle empty performance events",
          "status": "passed",
          "title": "should handle empty performance events",
          "duration": 0.4599749999999858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Performance Analysis"],
          "fullName": "Balance Analyzer Performance Analysis should calculate frame rate consistency",
          "status": "passed",
          "title": "should calculate frame rate consistency",
          "duration": 0.47401300000001356,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Recommendation Generation"],
          "fullName": "Balance Analyzer Recommendation Generation should generate high priority recommendations for critical issues",
          "status": "passed",
          "title": "should generate high priority recommendations for critical issues",
          "duration": 0.308907999999974,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Recommendation Generation"],
          "fullName": "Balance Analyzer Recommendation Generation should generate medium priority recommendations for moderate issues",
          "status": "passed",
          "title": "should generate medium priority recommendations for moderate issues",
          "duration": 0.18123800000012125,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Analyzer", "Recommendation Generation"],
          "fullName": "Balance Analyzer Recommendation Generation should categorize recommendations correctly",
          "status": "passed",
          "title": "should categorize recommendations correctly",
          "duration": 0.8181200000001354,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235209,
      "endTime": 1760137235227.818,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/balance-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Balance Testing Framework", "Scenario Management"],
          "fullName": "Balance Testing Framework Scenario Management should create default scenarios",
          "status": "passed",
          "title": "should create default scenarios",
          "duration": 7.746863999999732,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Scenario Management"],
          "fullName": "Balance Testing Framework Scenario Management should add custom scenarios",
          "status": "passed",
          "title": "should add custom scenarios",
          "duration": 1.5064769999999044,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Scenario Management"],
          "fullName": "Balance Testing Framework Scenario Management should get specific scenario by ID",
          "status": "passed",
          "title": "should get specific scenario by ID",
          "duration": 0.6103429999998298,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Scenario Management"],
          "fullName": "Balance Testing Framework Scenario Management should return undefined for non-existent scenario",
          "status": "passed",
          "title": "should return undefined for non-existent scenario",
          "duration": 0.32643800000005285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Test Execution"],
          "fullName": "Balance Testing Framework Test Execution should execute a test successfully",
          "status": "passed",
          "title": "should execute a test successfully",
          "duration": 20.538503999999648,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Test Execution"],
          "fullName": "Balance Testing Framework Test Execution should throw error for non-existent scenario",
          "status": "passed",
          "title": "should throw error for non-existent scenario",
          "duration": 1.4784700000000157,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Test Execution"],
          "fullName": "Balance Testing Framework Test Execution should prevent concurrent test execution",
          "status": "passed",
          "title": "should prevent concurrent test execution",
          "duration": 12.425043000000187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Test Execution"],
          "fullName": "Balance Testing Framework Test Execution should track test results",
          "status": "passed",
          "title": "should track test results",
          "duration": 13.098661999999877,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Test Execution"],
          "fullName": "Balance Testing Framework Test Execution should clear test results",
          "status": "passed",
          "title": "should clear test results",
          "duration": 13.673107000000073,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Balance Analysis"],
          "fullName": "Balance Testing Framework Balance Analysis should analyze balance correctly",
          "status": "passed",
          "title": "should analyze balance correctly",
          "duration": 10.635779000000184,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Balance Analysis"],
          "fullName": "Balance Testing Framework Balance Analysis should provide progression curve analysis",
          "status": "passed",
          "title": "should provide progression curve analysis",
          "duration": 6.6166229999998905,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Performance Metrics"],
          "fullName": "Balance Testing Framework Performance Metrics should collect performance metrics",
          "status": "passed",
          "title": "should collect performance metrics",
          "duration": 10.47675100000015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Economic Metrics"],
          "fullName": "Balance Testing Framework Economic Metrics should collect economic metrics",
          "status": "passed",
          "title": "should collect economic metrics",
          "duration": 10.789010999999846,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Scenario Variations"],
          "fullName": "Balance Testing Framework Scenario Variations should handle different progression scenarios",
          "status": "passed",
          "title": "should handle different progression scenarios",
          "duration": 29.506542999999965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Balance Testing Framework", "Scenario Variations"],
          "fullName": "Balance Testing Framework Scenario Variations should handle stress test scenario",
          "status": "passed",
          "title": "should handle stress test scenario",
          "duration": 20.442961000000196,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235208,
      "endTime": 1760137235369.4429,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/balance-testing.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Economic Metrics Collector", "Collection Control"],
          "fullName": "Economic Metrics Collector Collection Control should start and stop collection",
          "status": "passed",
          "title": "should start and stop collection",
          "duration": 2.9650410000001557,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Collection Control"],
          "fullName": "Economic Metrics Collector Collection Control should not record events when not collecting",
          "status": "passed",
          "title": "should not record events when not collecting",
          "duration": 1.295904999999948,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Collection Control"],
          "fullName": "Economic Metrics Collector Collection Control should record events when collecting",
          "status": "passed",
          "title": "should record events when collecting",
          "duration": 0.4990859999998065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Recording"],
          "fullName": "Economic Metrics Collector Event Recording should record different event types",
          "status": "passed",
          "title": "should record different event types",
          "duration": 1.3738479999997253,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Recording"],
          "fullName": "Economic Metrics Collector Event Recording should include performance metrics when enabled",
          "status": "passed",
          "title": "should include performance metrics when enabled",
          "duration": 0.7191560000001118,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Recording"],
          "fullName": "Economic Metrics Collector Event Recording should not include performance metrics when disabled",
          "status": "passed",
          "title": "should not include performance metrics when disabled",
          "duration": 0.5658540000003995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Recording"],
          "fullName": "Economic Metrics Collector Event Recording should trim events when exceeding maximum",
          "status": "passed",
          "title": "should trim events when exceeding maximum",
          "duration": 0.534146000000419,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Filtering"],
          "fullName": "Economic Metrics Collector Event Filtering should filter events by type",
          "status": "passed",
          "title": "should filter events by type",
          "duration": 1.0508319999999003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Filtering"],
          "fullName": "Economic Metrics Collector Event Filtering should filter events by time range",
          "status": "passed",
          "title": "should filter events by time range",
          "duration": 1.1094289999996363,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Event Filtering"],
          "fullName": "Economic Metrics Collector Event Filtering should return empty array for events outside time range",
          "status": "passed",
          "title": "should return empty array for events outside time range",
          "duration": 0.41010800000003655,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Snapshot Management"],
          "fullName": "Economic Metrics Collector Snapshot Management should take snapshots",
          "status": "passed",
          "title": "should take snapshots",
          "duration": 1.1236759999997048,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Snapshot Management"],
          "fullName": "Economic Metrics Collector Snapshot Management should get latest snapshot",
          "status": "passed",
          "title": "should get latest snapshot",
          "duration": 0.424844000000121,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Snapshot Management"],
          "fullName": "Economic Metrics Collector Snapshot Management should return undefined for latest snapshot when none exist",
          "status": "passed",
          "title": "should return undefined for latest snapshot when none exist",
          "duration": 0.24793700000009267,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Metrics Summary"],
          "fullName": "Economic Metrics Collector Metrics Summary should generate metrics summary",
          "status": "passed",
          "title": "should generate metrics summary",
          "duration": 0.8714799999997922,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Metrics Summary"],
          "fullName": "Economic Metrics Collector Metrics Summary should calculate performance summary correctly",
          "status": "passed",
          "title": "should calculate performance summary correctly",
          "duration": 2.41099099999974,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Data Export"],
          "fullName": "Economic Metrics Collector Data Export should export complete data",
          "status": "passed",
          "title": "should export complete data",
          "duration": 0.7858539999997447,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Data Clearing"],
          "fullName": "Economic Metrics Collector Data Clearing should clear all data",
          "status": "passed",
          "title": "should clear all data",
          "duration": 0.7934669999999642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Real-time Analysis"],
          "fullName": "Economic Metrics Collector Real-time Analysis should perform real-time analysis when enabled",
          "status": "passed",
          "title": "should perform real-time analysis when enabled",
          "duration": 4.0158040000001165,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Economic Metrics Collector", "Real-time Analysis"],
          "fullName": "Economic Metrics Collector Real-time Analysis should not perform real-time analysis when disabled",
          "status": "passed",
          "title": "should not perform real-time analysis when disabled",
          "duration": 0.4410469999997986,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235314,
      "endTime": 1760137235337.4412,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/economic-metrics.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Enchant System", "Enchant Cost Calculator"],
          "fullName": "Enchant System Enchant Cost Calculator should calculate correct costs for geometric progression",
          "status": "passed",
          "title": "should calculate correct costs for geometric progression",
          "duration": 3.035511999999926,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Cost Calculator"],
          "fullName": "Enchant System Enchant Cost Calculator should calculate total cost for level ranges",
          "status": "passed",
          "title": "should calculate total cost for level ranges",
          "duration": 0.5023680000001605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Cost Calculator"],
          "fullName": "Enchant System Enchant Cost Calculator should handle Soul Forging cost calculations",
          "status": "passed",
          "title": "should handle Soul Forging cost calculations",
          "duration": 0.5625709999999344,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Cost Calculator"],
          "fullName": "Enchant System Enchant Cost Calculator should validate affordable purchases",
          "status": "passed",
          "title": "should validate affordable purchases",
          "duration": 0.39599999999995816,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Cost Calculator"],
          "fullName": "Enchant System Enchant Cost Calculator should calculate max affordable level",
          "status": "passed",
          "title": "should calculate max affordable level",
          "duration": 0.9027690000000348,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should initialize with zero levels",
          "status": "passed",
          "title": "should initialize with zero levels",
          "duration": 0.6108309999999619,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should calculate effective cap correctly",
          "status": "passed",
          "title": "should calculate effective cap correctly",
          "duration": 0.31931399999984933,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should handle temporary Soul Forging purchases",
          "status": "passed",
          "title": "should handle temporary Soul Forging purchases",
          "duration": 1.224456999999802,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should handle permanent Soul Forging purchases",
          "status": "passed",
          "title": "should handle permanent Soul Forging purchases",
          "duration": 0.6841649999998936,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should reset temporary Soul Forging",
          "status": "passed",
          "title": "should reset temporary Soul Forging",
          "duration": 0.30939699999998993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should track transaction history",
          "status": "passed",
          "title": "should track transaction history",
          "duration": 0.23417799999992894,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Soul Forging System"],
          "fullName": "Enchant System Soul Forging System should provide Soul Forging statistics",
          "status": "passed",
          "title": "should provide Soul Forging statistics",
          "duration": 0.32587899999998626,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should initialize with zero levels",
          "status": "passed",
          "title": "should initialize with zero levels",
          "duration": 0.2123869999998078,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should have correct initial cap",
          "status": "passed",
          "title": "should have correct initial cap",
          "duration": 0.15420899999980975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should calculate enchant costs correctly",
          "status": "passed",
          "title": "should calculate enchant costs correctly",
          "duration": 0.17509199999994962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should enforce location restrictions for Arcana spending",
          "status": "passed",
          "title": "should enforce location restrictions for Arcana spending",
          "duration": 0.17697799999996278,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should enforce location restrictions for Soul Power spending",
          "status": "passed",
          "title": "should enforce location restrictions for Soul Power spending",
          "duration": 0.13961200000017016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should handle successful enchant purchases",
          "status": "passed",
          "title": "should handle successful enchant purchases",
          "duration": 0.30087699999990036,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should handle failed enchant purchases due to location",
          "status": "passed",
          "title": "should handle failed enchant purchases due to location",
          "duration": 0.38699100000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should handle failed enchant purchases due to insufficient currency",
          "status": "passed",
          "title": "should handle failed enchant purchases due to insufficient currency",
          "duration": 0.41492700000003424,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should reset temporary enchants",
          "status": "passed",
          "title": "should reset temporary enchants",
          "duration": 0.23795000000018263,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should track transaction history",
          "status": "passed",
          "title": "should track transaction history",
          "duration": 0.3350279999999657,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Enchant Manager"],
          "fullName": "Enchant System Enchant Manager should provide analytics",
          "status": "passed",
          "title": "should provide analytics",
          "duration": 0.4191879999998491,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Integration Tests"],
          "fullName": "Enchant System Integration Tests should integrate Soul Forging with enchant caps",
          "status": "passed",
          "title": "should integrate Soul Forging with enchant caps",
          "duration": 0.1859870000000683,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Integration Tests"],
          "fullName": "Enchant System Integration Tests should handle complex enchant scenarios",
          "status": "passed",
          "title": "should handle complex enchant scenarios",
          "duration": 0.2823680000001332,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Integration Tests"],
          "fullName": "Enchant System Integration Tests should handle location switching",
          "status": "passed",
          "title": "should handle location switching",
          "duration": 0.2479359999999815,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Performance Tests"],
          "fullName": "Enchant System Performance Tests should meet performance targets for cost calculations",
          "status": "passed",
          "title": "should meet performance targets for cost calculations",
          "duration": 0.555936999999858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Performance Tests"],
          "fullName": "Enchant System Performance Tests should meet performance targets for enchant operations",
          "status": "passed",
          "title": "should meet performance targets for enchant operations",
          "duration": 0.712451000000101,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Edge Cases"],
          "fullName": "Enchant System Edge Cases should handle zero amount purchases",
          "status": "passed",
          "title": "should handle zero amount purchases",
          "duration": 0.21385400000008303,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Edge Cases"],
          "fullName": "Enchant System Edge Cases should handle negative amount purchases",
          "status": "passed",
          "title": "should handle negative amount purchases",
          "duration": 0.16419700000005832,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Edge Cases"],
          "fullName": "Enchant System Edge Cases should handle invalid enchant types gracefully",
          "status": "passed",
          "title": "should handle invalid enchant types gracefully",
          "duration": 1.0929469999998673,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enchant System", "Edge Cases"],
          "fullName": "Enchant System Edge Cases should handle Soul Forging with insufficient currency",
          "status": "passed",
          "title": "should handle Soul Forging with insufficient currency",
          "duration": 0.32685700000001816,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235207,
      "endTime": 1760137235225.327,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/enchant-system.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Scenario Runner", "Initialization"],
          "fullName": "Scenario Runner Initialization should create runner with default options",
          "status": "passed",
          "title": "should create runner with default options",
          "duration": 4.1014289999998255,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Initialization"],
          "fullName": "Scenario Runner Initialization should create runner with custom options",
          "status": "passed",
          "title": "should create runner with custom options",
          "duration": 0.6817910000004304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Execution Control"],
          "fullName": "Scenario Runner Execution Control should execute scenario successfully",
          "status": "passed",
          "title": "should execute scenario successfully",
          "duration": 21.347545000000082,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Execution Control"],
          "fullName": "Scenario Runner Execution Control should track execution state during run",
          "status": "passed",
          "title": "should track execution state during run",
          "duration": 9.95971499999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Execution Control"],
          "fullName": "Scenario Runner Execution Control should stop execution when requested",
          "status": "passed",
          "title": "should stop execution when requested",
          "duration": 12.725918999999976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Execution Control"],
          "fullName": "Scenario Runner Execution Control should handle timeout",
          "status": "passed",
          "title": "should handle timeout",
          "duration": 120.22603500000014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Performance Monitoring"],
          "fullName": "Scenario Runner Performance Monitoring should collect performance metrics",
          "status": "passed",
          "title": "should collect performance metrics",
          "duration": 11.589950999999928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Performance Monitoring"],
          "fullName": "Scenario Runner Performance Monitoring should track frame timing",
          "status": "passed",
          "title": "should track frame timing",
          "duration": 12.6554500000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Performance Monitoring"],
          "fullName": "Scenario Runner Performance Monitoring should handle performance monitoring when disabled",
          "status": "passed",
          "title": "should handle performance monitoring when disabled",
          "duration": 14.938282000000072,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Event Statistics"],
          "fullName": "Scenario Runner Event Statistics should track economic events",
          "status": "passed",
          "title": "should track economic events",
          "duration": 6.773138000000017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Event Statistics"],
          "fullName": "Scenario Runner Event Statistics should track events per frame",
          "status": "passed",
          "title": "should track events per frame",
          "duration": 7.111867999999959,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "State Management"],
          "fullName": "Scenario Runner State Management should provide execution state",
          "status": "passed",
          "title": "should provide execution state",
          "duration": 0.42009600000028513,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "State Management"],
          "fullName": "Scenario Runner State Management should update state during execution",
          "status": "passed",
          "title": "should update state during execution",
          "duration": 8.41203299999961,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "State Management"],
          "fullName": "Scenario Runner State Management should track progress correctly",
          "status": "passed",
          "title": "should track progress correctly",
          "duration": 59.59723899999972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Simulation Speed"],
          "fullName": "Scenario Runner Simulation Speed should respect simulation speed multiplier",
          "status": "passed",
          "title": "should respect simulation speed multiplier",
          "duration": 10.393081000000166,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Error Handling"],
          "fullName": "Scenario Runner Error Handling should handle errors gracefully when pauseOnError is false",
          "status": "passed",
          "title": "should handle errors gracefully when pauseOnError is false",
          "duration": 1.609143000000131,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Error Handling"],
          "fullName": "Scenario Runner Error Handling should pause on errors when pauseOnError is true",
          "status": "passed",
          "title": "should pause on errors when pauseOnError is true",
          "duration": 0.5000629999999546,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Metrics Integration"],
          "fullName": "Scenario Runner Metrics Integration should integrate with metrics collector",
          "status": "passed",
          "title": "should integrate with metrics collector",
          "duration": 8.259639999999763,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Scenario Runner", "Metrics Integration"],
          "fullName": "Scenario Runner Metrics Integration should work without metrics collector",
          "status": "passed",
          "title": "should work without metrics collector",
          "duration": 12.003969000000325,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235205,
      "endTime": 1760137235531.004,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/scenario-runner.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should initialize with zero levels",
          "status": "passed",
          "title": "should initialize with zero levels",
          "duration": 2.4644889999999577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should handle temporary Soul Forging purchases",
          "status": "passed",
          "title": "should handle temporary Soul Forging purchases",
          "duration": 1.0857530000002953,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should handle permanent Soul Forging purchases",
          "status": "passed",
          "title": "should handle permanent Soul Forging purchases",
          "duration": 0.3743500000000495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should track milestones and achievements",
          "status": "passed",
          "title": "should track milestones and achievements",
          "duration": 0.3378219999999601,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should provide analytics",
          "status": "passed",
          "title": "should provide analytics",
          "duration": 0.4518029999999271,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should calculate optimal Soul Forging",
          "status": "passed",
          "title": "should calculate optimal Soul Forging",
          "duration": 0.5564260000001013,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should validate Soul Forging progression",
          "status": "passed",
          "title": "should validate Soul Forging progression",
          "duration": 0.994539999999688,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should save and load state",
          "status": "passed",
          "title": "should save and load state",
          "duration": 0.39551099999971484,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": "Enhanced Soul Forging System Enhanced Soul Forging Manager should reset temporary Soul Forging",
          "status": "passed",
          "title": "should reset temporary Soul Forging",
          "duration": 0.4797400000002199,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": "Enhanced Soul Forging System Soul Forging Cost Optimizer should calculate optimal purchase",
          "status": "passed",
          "title": "should calculate optimal purchase",
          "duration": 2.023091999999906,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": "Enhanced Soul Forging System Soul Forging Cost Optimizer should calculate bulk purchase",
          "status": "passed",
          "title": "should calculate bulk purchase",
          "duration": 0.6515490000001591,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": "Enhanced Soul Forging System Soul Forging Cost Optimizer should calculate cost progression",
          "status": "passed",
          "title": "should calculate cost progression",
          "duration": 0.6150220000004083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": "Enhanced Soul Forging System Soul Forging Cost Optimizer should get cost efficiency",
          "status": "passed",
          "title": "should get cost efficiency",
          "duration": 0.3577270000000681,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": "Enhanced Soul Forging System Soul Forging Persistence should save and load state",
          "status": "passed",
          "title": "should save and load state",
          "duration": 1.3271239999999125,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": "Enhanced Soul Forging System Soul Forging Persistence should validate state",
          "status": "passed",
          "title": "should validate state",
          "duration": 0.33411999999998443,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": "Enhanced Soul Forging System Soul Forging Persistence should repair invalid state",
          "status": "passed",
          "title": "should repair invalid state",
          "duration": 0.5487429999998312,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": "Enhanced Soul Forging System Soul Forging Persistence should list saved states",
          "status": "passed",
          "title": "should list saved states",
          "duration": 0.7451360000000022,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": "Enhanced Soul Forging System Soul Forging Persistence should delete saved state",
          "status": "passed",
          "title": "should delete saved state",
          "duration": 0.514241000000311,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should analyze Soul Forging state",
          "status": "passed",
          "title": "should analyze Soul Forging state",
          "duration": 1.4733020000003307,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should generate analytics report",
          "status": "passed",
          "title": "should generate analytics report",
          "duration": 0.8151170000001002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should get progression analytics",
          "status": "passed",
          "title": "should get progression analytics",
          "duration": 0.3364249999999629,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should get cost analytics",
          "status": "passed",
          "title": "should get cost analytics",
          "duration": 0.3042289999998502,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should get performance analytics",
          "status": "passed",
          "title": "should get performance analytics",
          "duration": 0.3382409999999254,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should get trend analytics",
          "status": "passed",
          "title": "should get trend analytics",
          "duration": 0.6940829999998641,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": "Enhanced Soul Forging System Soul Forging Analytics should get recommendations",
          "status": "passed",
          "title": "should get recommendations",
          "duration": 0.4518029999999271,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Integration Tests"],
          "fullName": "Enhanced Soul Forging System Integration Tests should integrate all Soul Forging components",
          "status": "passed",
          "title": "should integrate all Soul Forging components",
          "duration": 0.6495929999996406,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Integration Tests"],
          "fullName": "Enhanced Soul Forging System Integration Tests should handle complex Soul Forging scenarios",
          "status": "passed",
          "title": "should handle complex Soul Forging scenarios",
          "duration": 0.7901839999999538,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Integration Tests"],
          "fullName": "Enhanced Soul Forging System Integration Tests should handle state persistence across sessions",
          "status": "passed",
          "title": "should handle state persistence across sessions",
          "duration": 0.5246479999996154,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Performance Tests"],
          "fullName": "Enhanced Soul Forging System Performance Tests should meet performance targets for Soul Forging operations",
          "status": "passed",
          "title": "should meet performance targets for Soul Forging operations",
          "duration": 2.608291999999892,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Performance Tests"],
          "fullName": "Enhanced Soul Forging System Performance Tests should meet performance targets for cost calculations",
          "status": "passed",
          "title": "should meet performance targets for cost calculations",
          "duration": 6.977004000000306,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Edge Cases"],
          "fullName": "Enhanced Soul Forging System Edge Cases should handle zero amount purchases",
          "status": "passed",
          "title": "should handle zero amount purchases",
          "duration": 0.34864799999968454,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Edge Cases"],
          "fullName": "Enhanced Soul Forging System Edge Cases should handle negative amount purchases",
          "status": "passed",
          "title": "should handle negative amount purchases",
          "duration": 0.19248200000038196,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Edge Cases"],
          "fullName": "Enhanced Soul Forging System Edge Cases should handle insufficient currency",
          "status": "passed",
          "title": "should handle insufficient currency",
          "duration": 0.2990609999997105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Edge Cases"],
          "fullName": "Enhanced Soul Forging System Edge Cases should handle invalid state loading",
          "status": "passed",
          "title": "should handle invalid state loading",
          "duration": 1.120883000000049,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Enhanced Soul Forging System", "Edge Cases"],
          "fullName": "Enhanced Soul Forging System Edge Cases should handle empty analytics",
          "status": "passed",
          "title": "should handle empty analytics",
          "duration": 0.4064769999999953,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235717,
      "endTime": 1760137235751.4065,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/soul-forging.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should initialize with zero balance",
          "status": "passed",
          "title": "should initialize with zero balance",
          "duration": 4.404191000000083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should drop Soul Power correctly",
          "status": "passed",
          "title": "should drop Soul Power correctly",
          "duration": 3.5256580000000213,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should calculate drop chances and amounts correctly",
          "status": "passed",
          "title": "should calculate drop chances and amounts correctly",
          "duration": 0.9448130000000674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should handle distance scaling (slower than Arcana)",
          "status": "passed",
          "title": "should handle distance scaling (slower than Arcana)",
          "duration": 0.5246480000000702,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should handle ward scaling (slower than Arcana)",
          "status": "passed",
          "title": "should handle ward scaling (slower than Arcana)",
          "duration": 0.6462409999999181,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should handle combined distance and ward scaling",
          "status": "passed",
          "title": "should handle combined distance and ward scaling",
          "duration": 0.35535299999992276,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should spend Soul Power correctly",
          "status": "passed",
          "title": "should spend Soul Power correctly",
          "duration": 1.1727750000000015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should track drop history",
          "status": "passed",
          "title": "should track drop history",
          "duration": 1.0054349999995793,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should get lifetime statistics",
          "status": "passed",
          "title": "should get lifetime statistics",
          "duration": 10.078375999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should filter drops by source type",
          "status": "passed",
          "title": "should filter drops by source type",
          "duration": 2.4223050000000512,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should calculate total drops by source type",
          "status": "passed",
          "title": "should calculate total drops by source type",
          "duration": 0.7229269999997996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should get drop rate statistics",
          "status": "passed",
          "title": "should get drop rate statistics",
          "duration": 1.6412000000000262,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": "Soul Power Drop System Soul Power Drop Manager should get scaling statistics",
          "status": "passed",
          "title": "should get scaling statistics",
          "duration": 0.8454280000000836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": "Soul Power Drop System Soul Power Scaling System should calculate distance scaling factor (slower than Arcana)",
          "status": "passed",
          "title": "should calculate distance scaling factor (slower than Arcana)",
          "duration": 0.3439690000000155,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": "Soul Power Drop System Soul Power Scaling System should calculate ward scaling factor (slower than Arcana)",
          "status": "passed",
          "title": "should calculate ward scaling factor (slower than Arcana)",
          "duration": 0.26022899999998117,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": "Soul Power Drop System Soul Power Scaling System should calculate total scaling factor",
          "status": "passed",
          "title": "should calculate total scaling factor",
          "duration": 0.28055200000017066,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": "Soul Power Drop System Soul Power Scaling System should calculate drop amounts for different enemy types",
          "status": "passed",
          "title": "should calculate drop amounts for different enemy types",
          "duration": 0.45892700000013065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": "Soul Power Drop System Soul Power Scaling System should apply scaling correctly",
          "status": "passed",
          "title": "should apply scaling correctly",
          "duration": 0.4522919999999431,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": "Soul Power Drop System Soul Power Scaling System should respect min/max drop amounts",
          "status": "passed",
          "title": "should respect min/max drop amounts",
          "duration": 0.2460510000000795,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Performance Tests"],
          "fullName": "Soul Power Drop System Performance Tests should handle many drops efficiently",
          "status": "passed",
          "title": "should handle many drops efficiently",
          "duration": 80.47126100000014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Performance Tests"],
          "fullName": "Soul Power Drop System Performance Tests should handle scaling calculations efficiently",
          "status": "passed",
          "title": "should handle scaling calculations efficiently",
          "duration": 1.8707680000002256,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Edge Cases"],
          "fullName": "Soul Power Drop System Edge Cases should handle zero amounts gracefully",
          "status": "passed",
          "title": "should handle zero amounts gracefully",
          "duration": 0.2980830000001333,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Edge Cases"],
          "fullName": "Soul Power Drop System Edge Cases should handle negative amounts gracefully",
          "status": "passed",
          "title": "should handle negative amounts gracefully",
          "duration": 0.22991799999999785,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Edge Cases"],
          "fullName": "Soul Power Drop System Edge Cases should handle spending more than available",
          "status": "passed",
          "title": "should handle spending more than available",
          "duration": 0.41206400000010035,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Edge Cases"],
          "fullName": "Soul Power Drop System Edge Cases should handle spending zero amount",
          "status": "passed",
          "title": "should handle spending zero amount",
          "duration": 0.31652000000030966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Edge Cases"],
          "fullName": "Soul Power Drop System Edge Cases should handle very low Arcana amounts",
          "status": "passed",
          "title": "should handle very low Arcana amounts",
          "duration": 0.1556060000002617,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Edge Cases"],
          "fullName": "Soul Power Drop System Edge Cases should handle very high Arcana amounts",
          "status": "passed",
          "title": "should handle very high Arcana amounts",
          "duration": 0.14142899999978908,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Chance-based Mechanics"],
          "fullName": "Soul Power Drop System Chance-based Mechanics should have reasonable drop chances",
          "status": "passed",
          "title": "should have reasonable drop chances",
          "duration": 0.2308259999999791,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Soul Power Drop System", "Chance-based Mechanics"],
          "fullName": "Soul Power Drop System Chance-based Mechanics should cap drop chances at reasonable levels",
          "status": "passed",
          "title": "should cap drop chances at reasonable levels",
          "duration": 0.1447809999999663,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235120,
      "endTime": 1760137235237.2307,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/economy/soul-power-drop.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Flag Parsing", "DEFAULT_FLAGS"],
          "fullName": "Flag Parsing DEFAULT_FLAGS should have correct default values",
          "status": "passed",
          "title": "should have correct default values",
          "duration": 3.1807119999998577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should return empty object in production mode",
          "status": "passed",
          "title": "should return empty object in production mode",
          "duration": 0.7588960000000498,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should return empty object when no env vars are set",
          "status": "passed",
          "title": "should return empty object when no env vars are set",
          "duration": 0.28243799999995645,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should parse HUD flag from environment",
          "status": "passed",
          "title": "should parse HUD flag from environment",
          "duration": 0.374697999999853,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should parse dev menu flag from environment",
          "status": "passed",
          "title": "should parse dev menu flag from environment",
          "duration": 0.43664700000022094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should parse console logging flag from environment",
          "status": "passed",
          "title": "should parse console logging flag from environment",
          "duration": 0.388875999999982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should parse legacy background sim flag from environment",
          "status": "passed",
          "title": "should parse legacy background sim flag from environment",
          "duration": 0.28767599999991944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should parse force mode from environment",
          "status": "passed",
          "title": "should parse force mode from environment",
          "duration": 0.24123199999985445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should ignore invalid force mode values",
          "status": "passed",
          "title": "should ignore invalid force mode values",
          "duration": 0.5814980000000105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getEnvFlags"],
          "fullName": "Flag Parsing getEnvFlags should parse multiple flags from environment",
          "status": "passed",
          "title": "should parse multiple flags from environment",
          "duration": 0.44000099999993836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should return empty object in production mode",
          "status": "passed",
          "title": "should return empty object in production mode",
          "duration": 0.28767599999991944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should return empty object when no query params are present",
          "status": "passed",
          "title": "should return empty object when no query params are present",
          "duration": 0.2153209999999035,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should parse HUD flag from query string",
          "status": "passed",
          "title": "should parse HUD flag from query string",
          "duration": 0.2829269999999724,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should parse dev menu flag from query string",
          "status": "passed",
          "title": "should parse dev menu flag from query string",
          "duration": 0.20386699999994562,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should parse console logging flag from query string",
          "status": "passed",
          "title": "should parse console logging flag from query string",
          "duration": 0.23222200000009252,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should parse legacy background sim flag from query string",
          "status": "passed",
          "title": "should parse legacy background sim flag from query string",
          "duration": 0.2877459999999701,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should parse force mode from query string",
          "status": "passed",
          "title": "should parse force mode from query string",
          "duration": 0.24556200000006356,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should ignore invalid force mode values",
          "status": "passed",
          "title": "should ignore invalid force mode values",
          "duration": 0.24318700000003446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should parse multiple flags from query string",
          "status": "passed",
          "title": "should parse multiple flags from query string",
          "duration": 0.2601590000001579,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "getQueryFlags"],
          "fullName": "Flag Parsing getQueryFlags should ignore non-flag query parameters",
          "status": "passed",
          "title": "should ignore non-flag query parameters",
          "duration": 0.34110499999997046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "mergeFlags"],
          "fullName": "Flag Parsing mergeFlags should merge flags with correct precedence: query > env > defaults",
          "status": "passed",
          "title": "should merge flags with correct precedence: query > env > defaults",
          "duration": 0.2696569999998246,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "mergeFlags"],
          "fullName": "Flag Parsing mergeFlags should handle empty env and query flags",
          "status": "passed",
          "title": "should handle empty env and query flags",
          "duration": 0.2010729999999512,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "mergeFlags"],
          "fullName": "Flag Parsing mergeFlags should handle partial flag overrides",
          "status": "passed",
          "title": "should handle partial flag overrides",
          "duration": 0.19778999999994085,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "createFlags"],
          "fullName": "Flag Parsing createFlags should create complete flag configuration from URL",
          "status": "passed",
          "title": "should create complete flag configuration from URL",
          "duration": 0.3255309999999554,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "createFlags"],
          "fullName": "Flag Parsing createFlags should return defaults when no overrides are present",
          "status": "passed",
          "title": "should return defaults when no overrides are present",
          "duration": 0.47785399999997935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "createFlags"],
          "fullName": "Flag Parsing createFlags should respect production mode restrictions",
          "status": "passed",
          "title": "should respect production mode restrictions",
          "duration": 0.2072889999999461,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "ForceMode type validation"],
          "fullName": "Flag Parsing ForceMode type validation should accept valid force mode values",
          "status": "passed",
          "title": "should accept valid force mode values",
          "duration": 0.35807599999998274,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "ForceMode type validation"],
          "fullName": "Flag Parsing ForceMode type validation should reject invalid force mode values",
          "status": "passed",
          "title": "should reject invalid force mode values",
          "duration": 0.274895000000015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "Edge cases"],
          "fullName": "Flag Parsing Edge cases should handle malformed URLs gracefully",
          "status": "passed",
          "title": "should handle malformed URLs gracefully",
          "duration": 1.245689000000084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "Edge cases"],
          "fullName": "Flag Parsing Edge cases should handle empty query parameter values",
          "status": "passed",
          "title": "should handle empty query parameter values",
          "duration": 0.26253300000007584,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Parsing", "Edge cases"],
          "fullName": "Flag Parsing Edge cases should handle undefined environment variables",
          "status": "passed",
          "title": "should handle undefined environment variables",
          "duration": 0.19108600000004117,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235109,
      "endTime": 1760137235124.2625,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/flags/parse.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Flag Store", "appFlags store"],
          "fullName": "Flag Store appFlags store should initialize with default values",
          "status": "passed",
          "title": "should initialize with default values",
          "duration": 3.858730999999807,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "appFlags store"],
          "fullName": "Flag Store appFlags store should update when set is called",
          "status": "passed",
          "title": "should update when set is called",
          "duration": 0.5076070000000072,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "appFlags store"],
          "fullName": "Flag Store appFlags store should update when update is called",
          "status": "passed",
          "title": "should update when update is called",
          "duration": 0.5506990000003498,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "appFlags store"],
          "fullName": "Flag Store appFlags store should notify subscribers when values change",
          "status": "passed",
          "title": "should notify subscribers when values change",
          "duration": 4.164426000000276,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "appFlags store"],
          "fullName": "Flag Store appFlags store should not notify unsubscribed listeners",
          "status": "passed",
          "title": "should not notify unsubscribed listeners",
          "duration": 0.8525519999998323,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "derived stores"],
          "fullName": "Flag Store derived stores should derive hudEnabled correctly",
          "status": "passed",
          "title": "should derive hudEnabled correctly",
          "duration": 0.7640639999999621,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "derived stores"],
          "fullName": "Flag Store derived stores should derive devMenuEnabled correctly",
          "status": "passed",
          "title": "should derive devMenuEnabled correctly",
          "duration": 0.3066029999999955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "derived stores"],
          "fullName": "Flag Store derived stores should derive logConsoleEnabled correctly",
          "status": "passed",
          "title": "should derive logConsoleEnabled correctly",
          "duration": 0.2998979999997573,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "derived stores"],
          "fullName": "Flag Store derived stores should derive legacyBgSimEnabled correctly",
          "status": "passed",
          "title": "should derive legacyBgSimEnabled correctly",
          "duration": 0.3836380000002464,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "derived stores"],
          "fullName": "Flag Store derived stores should derive forceMode correctly",
          "status": "passed",
          "title": "should derive forceMode correctly",
          "duration": 0.4031239999999343,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "derived stores"],
          "fullName": "Flag Store derived stores should update derived stores when parent store changes",
          "status": "passed",
          "title": "should update derived stores when parent store changes",
          "duration": 0.5346349999999802,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "isFlagEnabled utility"],
          "fullName": "Flag Store isFlagEnabled utility should return a derived store for boolean flags",
          "status": "passed",
          "title": "should return a derived store for boolean flags",
          "duration": 0.25114899999971385,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "isFlagEnabled utility"],
          "fullName": "Flag Store isFlagEnabled utility should work with all boolean flags",
          "status": "passed",
          "title": "should work with all boolean flags",
          "duration": 0.5625019999997676,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "isFlagEnabled utility"],
          "fullName": "Flag Store isFlagEnabled utility should convert non-boolean values to boolean",
          "status": "passed",
          "title": "should convert non-boolean values to boolean",
          "duration": 0.18780300000025818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "isFlagEnabled utility"],
          "fullName": "Flag Store isFlagEnabled utility should update when flag values change",
          "status": "passed",
          "title": "should update when flag values change",
          "duration": 0.3842669999999089,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "getCurrentFlags utility"],
          "fullName": "Flag Store getCurrentFlags utility should return current flag values",
          "status": "passed",
          "title": "should return current flag values",
          "duration": 0.308907999999974,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "getCurrentFlags utility"],
          "fullName": "Flag Store getCurrentFlags utility should return updated values after store changes",
          "status": "passed",
          "title": "should return updated values after store changes",
          "duration": 0.17886399999997593,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "getCurrentFlags utility"],
          "fullName": "Flag Store getCurrentFlags utility should return a snapshot of current state",
          "status": "passed",
          "title": "should return a snapshot of current state",
          "duration": 0.22796199999993405,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "store integration"],
          "fullName": "Flag Store store integration should maintain consistency across all derived stores",
          "status": "passed",
          "title": "should maintain consistency across all derived stores",
          "duration": 0.2938920000001417,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "store integration"],
          "fullName": "Flag Store store integration should handle rapid updates correctly",
          "status": "passed",
          "title": "should handle rapid updates correctly",
          "duration": 0.2535240000001977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "store integration"],
          "fullName": "Flag Store store integration should handle partial updates correctly",
          "status": "passed",
          "title": "should handle partial updates correctly",
          "duration": 0.20966300000009142,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "edge cases"],
          "fullName": "Flag Store edge cases should handle undefined values gracefully",
          "status": "passed",
          "title": "should handle undefined values gracefully",
          "duration": 0.8605840000000171,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Flag Store", "edge cases"],
          "fullName": "Flag Store edge cases should handle multiple subscribers correctly",
          "status": "passed",
          "title": "should handle multiple subscribers correctly",
          "duration": 1.5985970000001544,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137235704,
      "endTime": 1760137235722.5986,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/flags/store.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": "Error Boundary Integration Tests Error Handling Functions should handle page reload functionality",
          "status": "passed",
          "title": "should handle page reload functionality",
          "duration": 2.4039370000000417,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": "Error Boundary Integration Tests Error Handling Functions should handle navigation to home",
          "status": "passed",
          "title": "should handle navigation to home",
          "duration": 0.5611039999998866,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": "Error Boundary Integration Tests Error Handling Functions should handle log export functionality",
          "status": "passed",
          "title": "should handle log export functionality",
          "duration": 3.501003999999739,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": "Error Boundary Integration Tests Error Handling Functions should handle log export errors gracefully",
          "status": "passed",
          "title": "should handle log export errors gracefully",
          "duration": 9.726374999999734,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": "Error Boundary Integration Tests Error Handling Functions should prevent multiple simultaneous log exports",
          "status": "passed",
          "title": "should prevent multiple simultaneous log exports",
          "duration": 106.15497200000027,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Information Processing"],
          "fullName": "Error Boundary Integration Tests Error Information Processing should generate detailed error information",
          "status": "passed",
          "title": "should generate detailed error information",
          "duration": 1.1723560000000361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Error Information Processing"],
          "fullName": "Error Boundary Integration Tests Error Information Processing should handle missing error information gracefully",
          "status": "passed",
          "title": "should handle missing error information gracefully",
          "duration": 0.7607809999999517,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Download Functionality"],
          "fullName": "Error Boundary Integration Tests Download Functionality should generate correct filename with current date",
          "status": "passed",
          "title": "should generate correct filename with current date",
          "duration": 0.3439680000001317,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Download Functionality"],
          "fullName": "Error Boundary Integration Tests Download Functionality should handle download errors gracefully",
          "status": "passed",
          "title": "should handle download errors gracefully",
          "duration": 2.0385980000000927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Integration Scenarios"],
          "fullName": "Error Boundary Integration Tests Integration Scenarios should handle complete error boundary workflow",
          "status": "passed",
          "title": "should handle complete error boundary workflow",
          "duration": 0.9600380000001678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Error Boundary Integration Tests", "Integration Scenarios"],
          "fullName": "Error Boundary Integration Tests Integration Scenarios should handle rapid user interactions without issues",
          "status": "passed",
          "title": "should handle rapid user interactions without issues",
          "duration": 0.43615900000031615,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137234960,
      "endTime": 1760137235089.4363,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/integration/error-boundary.int.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Log Export Integration Tests", "NDJSON Export"],
          "fullName": "Log Export Integration Tests NDJSON Export should export logs as NDJSON blob",
          "status": "passed",
          "title": "should export logs as NDJSON blob",
          "duration": 13.700554000000011,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "NDJSON Export"],
          "fullName": "Log Export Integration Tests NDJSON Export should export empty logs when no logs are present",
          "status": "passed",
          "title": "should export empty logs when no logs are present",
          "duration": 0.9155499999999392,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "NDJSON Export"],
          "fullName": "Log Export Integration Tests NDJSON Export should include proper NDJSON formatting",
          "status": "passed",
          "title": "should include proper NDJSON formatting",
          "duration": 1.9582100000000082,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "NDJSON Export"],
          "fullName": "Log Export Integration Tests NDJSON Export should handle multiple log entries correctly",
          "status": "passed",
          "title": "should handle multiple log entries correctly",
          "duration": 0.8103680000001532,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Download Functionality"],
          "fullName": "Log Export Integration Tests Download Functionality should trigger download with correct filename",
          "status": "passed",
          "title": "should trigger download with correct filename",
          "duration": 3.484521000000086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Download Functionality"],
          "fullName": "Log Export Integration Tests Download Functionality should generate filename with current date",
          "status": "passed",
          "title": "should generate filename with current date",
          "duration": 0.7366159999999127,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Download Functionality"],
          "fullName": "Log Export Integration Tests Download Functionality should handle download errors gracefully",
          "status": "passed",
          "title": "should handle download errors gracefully",
          "duration": 1.1051680000000488,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "PII Redaction in Exports"],
          "fullName": "Log Export Integration Tests PII Redaction in Exports should redact sensitive information in exported logs",
          "status": "passed",
          "title": "should redact sensitive information in exported logs",
          "duration": 1.1142479999998613,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "PII Redaction in Exports"],
          "fullName": "Log Export Integration Tests PII Redaction in Exports should preserve allowed data fields in exports",
          "status": "passed",
          "title": "should preserve allowed data fields in exports",
          "duration": 1.3290099999999256,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "PII Redaction in Exports"],
          "fullName": "Log Export Integration Tests PII Redaction in Exports should handle nested objects in data field",
          "status": "passed",
          "title": "should handle nested objects in data field",
          "duration": 1.0252700000000914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Memory Management"],
          "fullName": "Log Export Integration Tests Memory Management should respect memory limits during export",
          "status": "passed",
          "title": "should respect memory limits during export",
          "duration": 1.0753470000001926,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Memory Management"],
          "fullName": "Log Export Integration Tests Memory Management should handle large exports efficiently",
          "status": "passed",
          "title": "should handle large exports efficiently",
          "duration": 6.0787049999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Error Handling"],
          "fullName": "Log Export Integration Tests Error Handling should handle export errors gracefully",
          "status": "passed",
          "title": "should handle export errors gracefully",
          "duration": 1.891023000000132,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Error Handling"],
          "fullName": "Log Export Integration Tests Error Handling should handle corrupted log data",
          "status": "passed",
          "title": "should handle corrupted log data",
          "duration": 0.6410739999998896,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Log Export Integration Tests", "Integration with Error Boundary"],
          "fullName": "Log Export Integration Tests Integration with Error Boundary should work correctly when called from error boundary",
          "status": "passed",
          "title": "should work correctly when called from error boundary",
          "duration": 1.1842289999999593,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760137234970,
      "endTime": 1760137235008.1843,
      "status": "passed",
      "message": "",
      "name": "C:/Users/ediaz/Coding_Projects/dragonIdler/tests/integration/export-logs.int.spec.ts"
    }
  ]
}

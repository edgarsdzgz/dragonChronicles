{
  "numTotalTestSuites": 88,
  "numPassedTestSuites": 88,
  "numFailedTestSuites": 0,
  "numPendingTestSuites": 0,
  "numTotalTests": 271,
  "numPassedTests": 271,
  "numFailedTests": 0,
  "numPendingTests": 0,
  "numTodoTests": 0,
  "startTime": 1759492393282,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Atomic Write Operations", "putSaveAtomic"],
          "fullName": " Atomic Write Operations putSaveAtomic should write save data atomically",
          "status": "passed",
          "title": "should write save data atomically",
          "duration": 45,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "putSaveAtomic"],
          "fullName": " Atomic Write Operations putSaveAtomic should update active profile pointer",
          "status": "passed",
          "title": "should update active profile pointer",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "putSaveAtomic"],
          "fullName": " Atomic Write Operations putSaveAtomic should prune old saves to keep only 3 backups",
          "status": "passed",
          "title": "should prune old saves to keep only 3 backups",
          "duration": 27,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "putSaveAtomic"],
          "fullName": " Atomic Write Operations putSaveAtomic should handle concurrent writes to different profiles",
          "status": "passed",
          "title": "should handle concurrent writes to different profiles",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "putSaveAtomic"],
          "fullName": " Atomic Write Operations putSaveAtomic should maintain data integrity during transaction failures",
          "status": "passed",
          "title": "should maintain data integrity during transaction failures",
          "duration": 7,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "getActiveSave"],
          "fullName": " Atomic Write Operations getActiveSave should return the most recent save for a profile",
          "status": "passed",
          "title": "should return the most recent save for a profile",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "getActiveSave"],
          "fullName": " Atomic Write Operations getActiveSave should return null for non-existent profile",
          "status": "passed",
          "title": "should return null for non-existent profile",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "getActiveSave"],
          "fullName": " Atomic Write Operations getActiveSave should handle profile with multiple saves correctly",
          "status": "passed",
          "title": "should handle profile with multiple saves correctly",
          "duration": 18,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "Database consistency"],
          "fullName": " Atomic Write Operations Database consistency should maintain referential integrity between saves and meta tables",
          "status": "passed",
          "title": "should maintain referential integrity between saves and meta tables",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "Database consistency"],
          "fullName": " Atomic Write Operations Database consistency should handle database corruption gracefully",
          "status": "passed",
          "title": "should handle database corruption gracefully",
          "duration": 8,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "W3 time accounting integration"],
          "fullName": " Atomic Write Operations W3 time accounting integration should preserve W3 time accounting fields during atomic writes",
          "status": "passed",
          "title": "should preserve W3 time accounting fields during atomic writes",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Atomic Write Operations", "W3 time accounting integration"],
          "fullName": " Atomic Write Operations W3 time accounting integration should handle W3 time accounting updates correctly",
          "status": "passed",
          "title": "should handle W3 time accounting updates correctly",
          "duration": 4,
          "failureMessages": []
        }
      ],
      "startTime": 1759492395205,
      "endTime": 1759492395357,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/db/atomic.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Export/Import Functionality", "exportAllProfiles"],
          "fullName": " Export/Import Functionality exportAllProfiles should export all profiles with correct format",
          "status": "passed",
          "title": "should export all profiles with correct format",
          "duration": 66,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "exportAllProfiles"],
          "fullName": " Export/Import Functionality exportAllProfiles should include W3 time accounting fields in export",
          "status": "passed",
          "title": "should include W3 time accounting fields in export",
          "duration": 15,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "exportAllProfiles"],
          "fullName": " Export/Import Functionality exportAllProfiles should generate valid checksum for export data",
          "status": "passed",
          "title": "should generate valid checksum for export data",
          "duration": 7,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "exportAllProfiles"],
          "fullName": " Export/Import Functionality exportAllProfiles should handle empty database gracefully",
          "status": "passed",
          "title": "should handle empty database gracefully",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "importFromBlob"],
          "fullName": " Export/Import Functionality importFromBlob should import valid export data correctly",
          "status": "passed",
          "title": "should import valid export data correctly",
          "duration": 13,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "importFromBlob"],
          "fullName": " Export/Import Functionality importFromBlob should validate checksum during import",
          "status": "passed",
          "title": "should validate checksum during import",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "importFromBlob"],
          "fullName": " Export/Import Functionality importFromBlob should reject import with wrong file version",
          "status": "passed",
          "title": "should reject import with wrong file version",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "importFromBlob"],
          "fullName": " Export/Import Functionality importFromBlob should handle corrupted export data gracefully",
          "status": "passed",
          "title": "should handle corrupted export data gracefully",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "importFromBlob"],
          "fullName": " Export/Import Functionality importFromBlob should preserve W3 time accounting during import",
          "status": "passed",
          "title": "should preserve W3 time accounting during import",
          "duration": 10,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Round-trip data integrity"],
          "fullName": " Export/Import Functionality Round-trip data integrity should maintain data integrity through export-import cycle",
          "status": "passed",
          "title": "should maintain data integrity through export-import cycle",
          "duration": 22,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Round-trip data integrity"],
          "fullName": " Export/Import Functionality Round-trip data integrity should preserve all profile data during round-trip",
          "status": "passed",
          "title": "should preserve all profile data during round-trip",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Codec functions"],
          "fullName": " Export/Import Functionality Codec functions should encode and validate export data correctly",
          "status": "passed",
          "title": "should encode and validate export data correctly",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Codec functions"],
          "fullName": " Export/Import Functionality Codec functions should detect tampered export data",
          "status": "passed",
          "title": "should detect tampered export data",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Codec functions"],
          "fullName": " Export/Import Functionality Codec functions should handle checksum generation consistently",
          "status": "passed",
          "title": "should handle checksum generation consistently",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Multiple profile handling"],
          "fullName": " Export/Import Functionality Multiple profile handling should handle multiple profile pointers correctly",
          "status": "passed",
          "title": "should handle multiple profile pointers correctly",
          "duration": 12,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Export/Import Functionality", "Multiple profile handling"],
          "fullName": " Export/Import Functionality Multiple profile handling should maintain profile independence during import",
          "status": "passed",
          "title": "should maintain profile independence during import",
          "duration": 23,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394503,
      "endTime": 1759492394703,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/db/export-import.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Migration System", "Database Version Management"],
          "fullName": " Migration System Database Version Management should return version 1 for new database",
          "status": "passed",
          "title": "should return version 1 for new database",
          "duration": 27,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Database Version Management"],
          "fullName": " Migration System Database Version Management should track database version in meta table",
          "status": "passed",
          "title": "should track database version in meta table",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Database Version Management"],
          "fullName": " Migration System Database Version Management should handle missing version gracefully",
          "status": "passed",
          "title": "should handle missing version gracefully",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Status"],
          "fullName": " Migration System Migration Status should return correct migration status for fresh database",
          "status": "passed",
          "title": "should return correct migration status for fresh database",
          "duration": 11,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Status"],
          "fullName": " Migration System Migration Status should handle database with version set",
          "status": "passed",
          "title": "should handle database with version set",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Execution"],
          "fullName": " Migration System Migration Execution should handle no migrations needed",
          "status": "passed",
          "title": "should handle no migrations needed",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Execution"],
          "fullName": " Migration System Migration Execution should complete successfully when no data exists",
          "status": "passed",
          "title": "should complete successfully when no data exists",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Execution"],
          "fullName": " Migration System Migration Execution should handle migration with existing data",
          "status": "passed",
          "title": "should handle migration with existing data",
          "duration": 15,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Validation"],
          "fullName": " Migration System Migration Validation should validate empty database successfully",
          "status": "passed",
          "title": "should validate empty database successfully",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Validation"],
          "fullName": " Migration System Migration Validation should validate valid save data",
          "status": "passed",
          "title": "should validate valid save data",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Validation"],
          "fullName": " Migration System Migration Validation should detect invalid save data structure",
          "status": "passed",
          "title": "should detect invalid save data structure",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Validation"],
          "fullName": " Migration System Migration Validation should detect missing required fields",
          "status": "passed",
          "title": "should detect missing required fields",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Backup"],
          "fullName": " Migration System Migration Backup should create backup successfully for empty database",
          "status": "passed",
          "title": "should create backup successfully for empty database",
          "duration": 13,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Backup"],
          "fullName": " Migration System Migration Backup should create backup with save data",
          "status": "passed",
          "title": "should create backup with save data",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Backup"],
          "fullName": " Migration System Migration Backup should store backup in meta table",
          "status": "passed",
          "title": "should store backup in meta table",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Migration Backup"],
          "fullName": " Migration System Migration Backup should not backup other backups",
          "status": "passed",
          "title": "should not backup other backups",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Integration Tests"],
          "fullName": " Migration System Integration Tests should handle complete migration workflow",
          "status": "passed",
          "title": "should handle complete migration workflow",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Migration System", "Integration Tests"],
          "fullName": " Migration System Integration Tests should maintain data integrity through migration process",
          "status": "passed",
          "title": "should maintain data integrity through migration process",
          "duration": 7,
          "failureMessages": []
        }
      ],
      "startTime": 1759492395223,
      "endTime": 1759492395362,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/db/migrate.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Schema Validation", "ProfileV1 validation"],
          "fullName": " Schema Validation ProfileV1 validation should validate a complete valid profile",
          "status": "passed",
          "title": "should validate a complete valid profile",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ProfileV1 validation"],
          "fullName": " Schema Validation ProfileV1 validation should reject profile with missing W3 time accounting fields",
          "status": "passed",
          "title": "should reject profile with missing W3 time accounting fields",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ProfileV1 validation"],
          "fullName": " Schema Validation ProfileV1 validation should reject profile with invalid W3 time accounting",
          "status": "passed",
          "title": "should reject profile with invalid W3 time accounting",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ProfileV1 validation"],
          "fullName": " Schema Validation ProfileV1 validation should reject profile with invalid name length",
          "status": "passed",
          "title": "should reject profile with invalid name length",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ProfileV1 validation"],
          "fullName": " Schema Validation ProfileV1 validation should reject profile with negative progress values",
          "status": "passed",
          "title": "should reject profile with negative progress values",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ProfileV1 validation"],
          "fullName": " Schema Validation ProfileV1 validation should reject profile with non-integer values",
          "status": "passed",
          "title": "should reject profile with non-integer values",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "SaveV1 validation"],
          "fullName": " Schema Validation SaveV1 validation should validate a complete valid save",
          "status": "passed",
          "title": "should validate a complete valid save",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "SaveV1 validation"],
          "fullName": " Schema Validation SaveV1 validation should reject save with wrong version",
          "status": "passed",
          "title": "should reject save with wrong version",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "SaveV1 validation"],
          "fullName": " Schema Validation SaveV1 validation should reject save with no profiles",
          "status": "passed",
          "title": "should reject save with no profiles",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "SaveV1 validation"],
          "fullName": " Schema Validation SaveV1 validation should reject save with too many profiles",
          "status": "passed",
          "title": "should reject save with too many profiles",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "SaveV1 validation"],
          "fullName": " Schema Validation SaveV1 validation should reject save with invalid profile",
          "status": "passed",
          "title": "should reject save with invalid profile",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ExportFileV1 validation"],
          "fullName": " Schema Validation ExportFileV1 validation should validate a complete valid export file",
          "status": "passed",
          "title": "should validate a complete valid export file",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ExportFileV1 validation"],
          "fullName": " Schema Validation ExportFileV1 validation should reject export with wrong file version",
          "status": "passed",
          "title": "should reject export with wrong file version",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ExportFileV1 validation"],
          "fullName": " Schema Validation ExportFileV1 validation should reject export with empty checksum",
          "status": "passed",
          "title": "should reject export with empty checksum",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "ExportFileV1 validation"],
          "fullName": " Schema Validation ExportFileV1 validation should reject export with invalid data",
          "status": "passed",
          "title": "should reject export with invalid data",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should validate a complete valid save row",
          "status": "passed",
          "title": "should validate a complete valid save row",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should validate save row with optional id",
          "status": "passed",
          "title": "should validate save row with optional id",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should reject save row with invalid profile id",
          "status": "passed",
          "title": "should reject save row with invalid profile id",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should validate a complete valid meta row",
          "status": "passed",
          "title": "should validate a complete valid meta row",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should reject meta row with empty key",
          "status": "passed",
          "title": "should reject meta row with empty key",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should validate a complete valid log row",
          "status": "passed",
          "title": "should validate a complete valid log row",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should validate log row with optional id",
          "status": "passed",
          "title": "should validate log row with optional id",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should validate log row with optional data",
          "status": "passed",
          "title": "should validate log row with optional data",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should reject log row with invalid level",
          "status": "passed",
          "title": "should reject log row with invalid level",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should reject log row with invalid source",
          "status": "passed",
          "title": "should reject log row with invalid source",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Schema Validation", "Database row validation"],
          "fullName": " Schema Validation Database row validation should reject log row with empty message",
          "status": "passed",
          "title": "should reject log row with empty message",
          "duration": 0,
          "failureMessages": []
        }
      ],
      "startTime": 1759492395371,
      "endTime": 1759492395399,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/db/schema.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should initialize with zero balance",
          "status": "passed",
          "title": "should initialize with zero balance",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should drop Arcana correctly",
          "status": "passed",
          "title": "should drop Arcana correctly",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should calculate drop amounts correctly",
          "status": "passed",
          "title": "should calculate drop amounts correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should handle distance scaling",
          "status": "passed",
          "title": "should handle distance scaling",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should handle ward scaling",
          "status": "passed",
          "title": "should handle ward scaling",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should handle combined distance and ward scaling",
          "status": "passed",
          "title": "should handle combined distance and ward scaling",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should spend Arcana correctly",
          "status": "passed",
          "title": "should spend Arcana correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should reset for new journey",
          "status": "passed",
          "title": "should reset for new journey",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should track drop history",
          "status": "passed",
          "title": "should track drop history",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should get journey statistics",
          "status": "passed",
          "title": "should get journey statistics",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should filter drops by source type",
          "status": "passed",
          "title": "should filter drops by source type",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Drop Manager"],
          "fullName": " Arcana Drop System Arcana Drop Manager should calculate total drops by source type",
          "status": "passed",
          "title": "should calculate total drops by source type",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Scaling System"],
          "fullName": " Arcana Drop System Arcana Scaling System should calculate distance scaling factor",
          "status": "passed",
          "title": "should calculate distance scaling factor",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Scaling System"],
          "fullName": " Arcana Drop System Arcana Scaling System should calculate ward scaling factor",
          "status": "passed",
          "title": "should calculate ward scaling factor",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Scaling System"],
          "fullName": " Arcana Drop System Arcana Scaling System should calculate total scaling factor",
          "status": "passed",
          "title": "should calculate total scaling factor",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Scaling System"],
          "fullName": " Arcana Drop System Arcana Scaling System should calculate drop amounts for different enemy types",
          "status": "passed",
          "title": "should calculate drop amounts for different enemy types",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Arcana Scaling System"],
          "fullName": " Arcana Drop System Arcana Scaling System should apply scaling correctly",
          "status": "passed",
          "title": "should apply scaling correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Performance Tests"],
          "fullName": " Arcana Drop System Performance Tests should handle many drops efficiently",
          "status": "passed",
          "title": "should handle many drops efficiently",
          "duration": 49,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Performance Tests"],
          "fullName": " Arcana Drop System Performance Tests should handle scaling calculations efficiently",
          "status": "passed",
          "title": "should handle scaling calculations efficiently",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Edge Cases"],
          "fullName": " Arcana Drop System Edge Cases should handle zero amounts gracefully",
          "status": "passed",
          "title": "should handle zero amounts gracefully",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Edge Cases"],
          "fullName": " Arcana Drop System Edge Cases should handle negative amounts gracefully",
          "status": "passed",
          "title": "should handle negative amounts gracefully",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Edge Cases"],
          "fullName": " Arcana Drop System Edge Cases should handle spending more than available",
          "status": "passed",
          "title": "should handle spending more than available",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Arcana Drop System", "Edge Cases"],
          "fullName": " Arcana Drop System Edge Cases should handle spending zero amount",
          "status": "passed",
          "title": "should handle spending zero amount",
          "duration": 0,
          "failureMessages": []
        }
      ],
      "startTime": 1759492395124,
      "endTime": 1759492395194,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/economy/arcana-drop.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Cost Calculator"],
          "fullName": " Enchant System Enchant Cost Calculator should calculate correct costs for geometric progression",
          "status": "passed",
          "title": "should calculate correct costs for geometric progression",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Cost Calculator"],
          "fullName": " Enchant System Enchant Cost Calculator should calculate total cost for level ranges",
          "status": "passed",
          "title": "should calculate total cost for level ranges",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Cost Calculator"],
          "fullName": " Enchant System Enchant Cost Calculator should handle Soul Forging cost calculations",
          "status": "passed",
          "title": "should handle Soul Forging cost calculations",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Cost Calculator"],
          "fullName": " Enchant System Enchant Cost Calculator should validate affordable purchases",
          "status": "passed",
          "title": "should validate affordable purchases",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Cost Calculator"],
          "fullName": " Enchant System Enchant Cost Calculator should calculate max affordable level",
          "status": "passed",
          "title": "should calculate max affordable level",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should initialize with zero levels",
          "status": "passed",
          "title": "should initialize with zero levels",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should calculate effective cap correctly",
          "status": "passed",
          "title": "should calculate effective cap correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should handle temporary Soul Forging purchases",
          "status": "passed",
          "title": "should handle temporary Soul Forging purchases",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should handle permanent Soul Forging purchases",
          "status": "passed",
          "title": "should handle permanent Soul Forging purchases",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should reset temporary Soul Forging",
          "status": "passed",
          "title": "should reset temporary Soul Forging",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should track transaction history",
          "status": "passed",
          "title": "should track transaction history",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Soul Forging System"],
          "fullName": " Enchant System Soul Forging System should provide Soul Forging statistics",
          "status": "passed",
          "title": "should provide Soul Forging statistics",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should initialize with zero levels",
          "status": "passed",
          "title": "should initialize with zero levels",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should have correct initial cap",
          "status": "passed",
          "title": "should have correct initial cap",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should calculate enchant costs correctly",
          "status": "passed",
          "title": "should calculate enchant costs correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should enforce location restrictions for Arcana spending",
          "status": "passed",
          "title": "should enforce location restrictions for Arcana spending",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should enforce location restrictions for Soul Power spending",
          "status": "passed",
          "title": "should enforce location restrictions for Soul Power spending",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should handle successful enchant purchases",
          "status": "passed",
          "title": "should handle successful enchant purchases",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should handle failed enchant purchases due to location",
          "status": "passed",
          "title": "should handle failed enchant purchases due to location",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should handle failed enchant purchases due to insufficient currency",
          "status": "passed",
          "title": "should handle failed enchant purchases due to insufficient currency",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should reset temporary enchants",
          "status": "passed",
          "title": "should reset temporary enchants",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should track transaction history",
          "status": "passed",
          "title": "should track transaction history",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Enchant Manager"],
          "fullName": " Enchant System Enchant Manager should provide analytics",
          "status": "passed",
          "title": "should provide analytics",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Integration Tests"],
          "fullName": " Enchant System Integration Tests should integrate Soul Forging with enchant caps",
          "status": "passed",
          "title": "should integrate Soul Forging with enchant caps",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Integration Tests"],
          "fullName": " Enchant System Integration Tests should handle complex enchant scenarios",
          "status": "passed",
          "title": "should handle complex enchant scenarios",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Integration Tests"],
          "fullName": " Enchant System Integration Tests should handle location switching",
          "status": "passed",
          "title": "should handle location switching",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Performance Tests"],
          "fullName": " Enchant System Performance Tests should meet performance targets for cost calculations",
          "status": "passed",
          "title": "should meet performance targets for cost calculations",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Performance Tests"],
          "fullName": " Enchant System Performance Tests should meet performance targets for enchant operations",
          "status": "passed",
          "title": "should meet performance targets for enchant operations",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Edge Cases"],
          "fullName": " Enchant System Edge Cases should handle zero amount purchases",
          "status": "passed",
          "title": "should handle zero amount purchases",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Edge Cases"],
          "fullName": " Enchant System Edge Cases should handle negative amount purchases",
          "status": "passed",
          "title": "should handle negative amount purchases",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Edge Cases"],
          "fullName": " Enchant System Edge Cases should handle invalid enchant types gracefully",
          "status": "passed",
          "title": "should handle invalid enchant types gracefully",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enchant System", "Edge Cases"],
          "fullName": " Enchant System Edge Cases should handle Soul Forging with insufficient currency",
          "status": "passed",
          "title": "should handle Soul Forging with insufficient currency",
          "duration": 1,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394388,
      "endTime": 1759492394419,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/economy/enchant-system.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should initialize with zero levels",
          "status": "passed",
          "title": "should initialize with zero levels",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should handle temporary Soul Forging purchases",
          "status": "passed",
          "title": "should handle temporary Soul Forging purchases",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should handle permanent Soul Forging purchases",
          "status": "passed",
          "title": "should handle permanent Soul Forging purchases",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should track milestones and achievements",
          "status": "passed",
          "title": "should track milestones and achievements",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should provide analytics",
          "status": "passed",
          "title": "should provide analytics",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should calculate optimal Soul Forging",
          "status": "passed",
          "title": "should calculate optimal Soul Forging",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should validate Soul Forging progression",
          "status": "passed",
          "title": "should validate Soul Forging progression",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should save and load state",
          "status": "passed",
          "title": "should save and load state",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Enhanced Soul Forging Manager"],
          "fullName": " Enhanced Soul Forging System Enhanced Soul Forging Manager should reset temporary Soul Forging",
          "status": "passed",
          "title": "should reset temporary Soul Forging",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": " Enhanced Soul Forging System Soul Forging Cost Optimizer should calculate optimal purchase",
          "status": "passed",
          "title": "should calculate optimal purchase",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": " Enhanced Soul Forging System Soul Forging Cost Optimizer should calculate bulk purchase",
          "status": "passed",
          "title": "should calculate bulk purchase",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": " Enhanced Soul Forging System Soul Forging Cost Optimizer should calculate cost progression",
          "status": "passed",
          "title": "should calculate cost progression",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Cost Optimizer"],
          "fullName": " Enhanced Soul Forging System Soul Forging Cost Optimizer should get cost efficiency",
          "status": "passed",
          "title": "should get cost efficiency",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": " Enhanced Soul Forging System Soul Forging Persistence should save and load state",
          "status": "passed",
          "title": "should save and load state",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": " Enhanced Soul Forging System Soul Forging Persistence should validate state",
          "status": "passed",
          "title": "should validate state",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": " Enhanced Soul Forging System Soul Forging Persistence should repair invalid state",
          "status": "passed",
          "title": "should repair invalid state",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": " Enhanced Soul Forging System Soul Forging Persistence should list saved states",
          "status": "passed",
          "title": "should list saved states",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Persistence"],
          "fullName": " Enhanced Soul Forging System Soul Forging Persistence should delete saved state",
          "status": "passed",
          "title": "should delete saved state",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should analyze Soul Forging state",
          "status": "passed",
          "title": "should analyze Soul Forging state",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should generate analytics report",
          "status": "passed",
          "title": "should generate analytics report",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should get progression analytics",
          "status": "passed",
          "title": "should get progression analytics",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should get cost analytics",
          "status": "passed",
          "title": "should get cost analytics",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should get performance analytics",
          "status": "passed",
          "title": "should get performance analytics",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should get trend analytics",
          "status": "passed",
          "title": "should get trend analytics",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Soul Forging Analytics"],
          "fullName": " Enhanced Soul Forging System Soul Forging Analytics should get recommendations",
          "status": "passed",
          "title": "should get recommendations",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Integration Tests"],
          "fullName": " Enhanced Soul Forging System Integration Tests should integrate all Soul Forging components",
          "status": "passed",
          "title": "should integrate all Soul Forging components",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Integration Tests"],
          "fullName": " Enhanced Soul Forging System Integration Tests should handle complex Soul Forging scenarios",
          "status": "passed",
          "title": "should handle complex Soul Forging scenarios",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Integration Tests"],
          "fullName": " Enhanced Soul Forging System Integration Tests should handle state persistence across sessions",
          "status": "passed",
          "title": "should handle state persistence across sessions",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Performance Tests"],
          "fullName": " Enhanced Soul Forging System Performance Tests should meet performance targets for Soul Forging operations",
          "status": "passed",
          "title": "should meet performance targets for Soul Forging operations",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Performance Tests"],
          "fullName": " Enhanced Soul Forging System Performance Tests should meet performance targets for cost calculations",
          "status": "passed",
          "title": "should meet performance targets for cost calculations",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Edge Cases"],
          "fullName": " Enhanced Soul Forging System Edge Cases should handle zero amount purchases",
          "status": "passed",
          "title": "should handle zero amount purchases",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Edge Cases"],
          "fullName": " Enhanced Soul Forging System Edge Cases should handle negative amount purchases",
          "status": "passed",
          "title": "should handle negative amount purchases",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Edge Cases"],
          "fullName": " Enhanced Soul Forging System Edge Cases should handle insufficient currency",
          "status": "passed",
          "title": "should handle insufficient currency",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Edge Cases"],
          "fullName": " Enhanced Soul Forging System Edge Cases should handle invalid state loading",
          "status": "passed",
          "title": "should handle invalid state loading",
          "duration": 6,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Enhanced Soul Forging System", "Edge Cases"],
          "fullName": " Enhanced Soul Forging System Edge Cases should handle empty analytics",
          "status": "passed",
          "title": "should handle empty analytics",
          "duration": 1,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394239,
      "endTime": 1759492394291,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/economy/soul-forging.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should initialize with zero balance",
          "status": "passed",
          "title": "should initialize with zero balance",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should drop Soul Power correctly",
          "status": "passed",
          "title": "should drop Soul Power correctly",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should calculate drop chances and amounts correctly",
          "status": "passed",
          "title": "should calculate drop chances and amounts correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should handle distance scaling (slower than Arcana)",
          "status": "passed",
          "title": "should handle distance scaling (slower than Arcana)",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should handle ward scaling (slower than Arcana)",
          "status": "passed",
          "title": "should handle ward scaling (slower than Arcana)",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should handle combined distance and ward scaling",
          "status": "passed",
          "title": "should handle combined distance and ward scaling",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should spend Soul Power correctly",
          "status": "passed",
          "title": "should spend Soul Power correctly",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should track drop history",
          "status": "passed",
          "title": "should track drop history",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should get lifetime statistics",
          "status": "passed",
          "title": "should get lifetime statistics",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should filter drops by source type",
          "status": "passed",
          "title": "should filter drops by source type",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should calculate total drops by source type",
          "status": "passed",
          "title": "should calculate total drops by source type",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should get drop rate statistics",
          "status": "passed",
          "title": "should get drop rate statistics",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Drop Manager"],
          "fullName": " Soul Power Drop System Soul Power Drop Manager should get scaling statistics",
          "status": "passed",
          "title": "should get scaling statistics",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": " Soul Power Drop System Soul Power Scaling System should calculate distance scaling factor (slower than Arcana)",
          "status": "passed",
          "title": "should calculate distance scaling factor (slower than Arcana)",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": " Soul Power Drop System Soul Power Scaling System should calculate ward scaling factor (slower than Arcana)",
          "status": "passed",
          "title": "should calculate ward scaling factor (slower than Arcana)",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": " Soul Power Drop System Soul Power Scaling System should calculate total scaling factor",
          "status": "passed",
          "title": "should calculate total scaling factor",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": " Soul Power Drop System Soul Power Scaling System should calculate drop amounts for different enemy types",
          "status": "passed",
          "title": "should calculate drop amounts for different enemy types",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": " Soul Power Drop System Soul Power Scaling System should apply scaling correctly",
          "status": "passed",
          "title": "should apply scaling correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Soul Power Scaling System"],
          "fullName": " Soul Power Drop System Soul Power Scaling System should respect min/max drop amounts",
          "status": "passed",
          "title": "should respect min/max drop amounts",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Performance Tests"],
          "fullName": " Soul Power Drop System Performance Tests should handle many drops efficiently",
          "status": "passed",
          "title": "should handle many drops efficiently",
          "duration": 53,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Performance Tests"],
          "fullName": " Soul Power Drop System Performance Tests should handle scaling calculations efficiently",
          "status": "passed",
          "title": "should handle scaling calculations efficiently",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Edge Cases"],
          "fullName": " Soul Power Drop System Edge Cases should handle zero amounts gracefully",
          "status": "passed",
          "title": "should handle zero amounts gracefully",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Edge Cases"],
          "fullName": " Soul Power Drop System Edge Cases should handle negative amounts gracefully",
          "status": "passed",
          "title": "should handle negative amounts gracefully",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Edge Cases"],
          "fullName": " Soul Power Drop System Edge Cases should handle spending more than available",
          "status": "passed",
          "title": "should handle spending more than available",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Edge Cases"],
          "fullName": " Soul Power Drop System Edge Cases should handle spending zero amount",
          "status": "passed",
          "title": "should handle spending zero amount",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Edge Cases"],
          "fullName": " Soul Power Drop System Edge Cases should handle very low Arcana amounts",
          "status": "passed",
          "title": "should handle very low Arcana amounts",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Edge Cases"],
          "fullName": " Soul Power Drop System Edge Cases should handle very high Arcana amounts",
          "status": "passed",
          "title": "should handle very high Arcana amounts",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Chance-based Mechanics"],
          "fullName": " Soul Power Drop System Chance-based Mechanics should have reasonable drop chances",
          "status": "passed",
          "title": "should have reasonable drop chances",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Soul Power Drop System", "Chance-based Mechanics"],
          "fullName": " Soul Power Drop System Chance-based Mechanics should cap drop chances at reasonable levels",
          "status": "passed",
          "title": "should cap drop chances at reasonable levels",
          "duration": 0,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394223,
      "endTime": 1759492394305,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/economy/soul-power-drop.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Flag Parsing", "DEFAULT_FLAGS"],
          "fullName": " Flag Parsing DEFAULT_FLAGS should have correct default values",
          "status": "passed",
          "title": "should have correct default values",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should return empty object in production mode",
          "status": "passed",
          "title": "should return empty object in production mode",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should return empty object when no env vars are set",
          "status": "passed",
          "title": "should return empty object when no env vars are set",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should parse HUD flag from environment",
          "status": "passed",
          "title": "should parse HUD flag from environment",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should parse dev menu flag from environment",
          "status": "passed",
          "title": "should parse dev menu flag from environment",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should parse console logging flag from environment",
          "status": "passed",
          "title": "should parse console logging flag from environment",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should parse legacy background sim flag from environment",
          "status": "passed",
          "title": "should parse legacy background sim flag from environment",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should parse force mode from environment",
          "status": "passed",
          "title": "should parse force mode from environment",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should ignore invalid force mode values",
          "status": "passed",
          "title": "should ignore invalid force mode values",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getEnvFlags"],
          "fullName": " Flag Parsing getEnvFlags should parse multiple flags from environment",
          "status": "passed",
          "title": "should parse multiple flags from environment",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should return empty object in production mode",
          "status": "passed",
          "title": "should return empty object in production mode",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should return empty object when no query params are present",
          "status": "passed",
          "title": "should return empty object when no query params are present",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should parse HUD flag from query string",
          "status": "passed",
          "title": "should parse HUD flag from query string",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should parse dev menu flag from query string",
          "status": "passed",
          "title": "should parse dev menu flag from query string",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should parse console logging flag from query string",
          "status": "passed",
          "title": "should parse console logging flag from query string",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should parse legacy background sim flag from query string",
          "status": "passed",
          "title": "should parse legacy background sim flag from query string",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should parse force mode from query string",
          "status": "passed",
          "title": "should parse force mode from query string",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should ignore invalid force mode values",
          "status": "passed",
          "title": "should ignore invalid force mode values",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should parse multiple flags from query string",
          "status": "passed",
          "title": "should parse multiple flags from query string",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "getQueryFlags"],
          "fullName": " Flag Parsing getQueryFlags should ignore non-flag query parameters",
          "status": "passed",
          "title": "should ignore non-flag query parameters",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "mergeFlags"],
          "fullName": " Flag Parsing mergeFlags should merge flags with correct precedence: query > env > defaults",
          "status": "passed",
          "title": "should merge flags with correct precedence: query > env > defaults",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "mergeFlags"],
          "fullName": " Flag Parsing mergeFlags should handle empty env and query flags",
          "status": "passed",
          "title": "should handle empty env and query flags",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "mergeFlags"],
          "fullName": " Flag Parsing mergeFlags should handle partial flag overrides",
          "status": "passed",
          "title": "should handle partial flag overrides",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "createFlags"],
          "fullName": " Flag Parsing createFlags should create complete flag configuration from URL",
          "status": "passed",
          "title": "should create complete flag configuration from URL",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "createFlags"],
          "fullName": " Flag Parsing createFlags should return defaults when no overrides are present",
          "status": "passed",
          "title": "should return defaults when no overrides are present",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "createFlags"],
          "fullName": " Flag Parsing createFlags should respect production mode restrictions",
          "status": "passed",
          "title": "should respect production mode restrictions",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "ForceMode type validation"],
          "fullName": " Flag Parsing ForceMode type validation should accept valid force mode values",
          "status": "passed",
          "title": "should accept valid force mode values",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "ForceMode type validation"],
          "fullName": " Flag Parsing ForceMode type validation should reject invalid force mode values",
          "status": "passed",
          "title": "should reject invalid force mode values",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "Edge cases"],
          "fullName": " Flag Parsing Edge cases should handle malformed URLs gracefully",
          "status": "passed",
          "title": "should handle malformed URLs gracefully",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "Edge cases"],
          "fullName": " Flag Parsing Edge cases should handle empty query parameter values",
          "status": "passed",
          "title": "should handle empty query parameter values",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Parsing", "Edge cases"],
          "fullName": " Flag Parsing Edge cases should handle undefined environment variables",
          "status": "passed",
          "title": "should handle undefined environment variables",
          "duration": 0,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394374,
      "endTime": 1759492394393,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/flags/parse.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Flag Store", "appFlags store"],
          "fullName": " Flag Store appFlags store should initialize with default values",
          "status": "passed",
          "title": "should initialize with default values",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "appFlags store"],
          "fullName": " Flag Store appFlags store should update when set is called",
          "status": "passed",
          "title": "should update when set is called",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "appFlags store"],
          "fullName": " Flag Store appFlags store should update when update is called",
          "status": "passed",
          "title": "should update when update is called",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "appFlags store"],
          "fullName": " Flag Store appFlags store should notify subscribers when values change",
          "status": "passed",
          "title": "should notify subscribers when values change",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "appFlags store"],
          "fullName": " Flag Store appFlags store should not notify unsubscribed listeners",
          "status": "passed",
          "title": "should not notify unsubscribed listeners",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "derived stores"],
          "fullName": " Flag Store derived stores should derive hudEnabled correctly",
          "status": "passed",
          "title": "should derive hudEnabled correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "derived stores"],
          "fullName": " Flag Store derived stores should derive devMenuEnabled correctly",
          "status": "passed",
          "title": "should derive devMenuEnabled correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "derived stores"],
          "fullName": " Flag Store derived stores should derive logConsoleEnabled correctly",
          "status": "passed",
          "title": "should derive logConsoleEnabled correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "derived stores"],
          "fullName": " Flag Store derived stores should derive legacyBgSimEnabled correctly",
          "status": "passed",
          "title": "should derive legacyBgSimEnabled correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "derived stores"],
          "fullName": " Flag Store derived stores should derive forceMode correctly",
          "status": "passed",
          "title": "should derive forceMode correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "derived stores"],
          "fullName": " Flag Store derived stores should update derived stores when parent store changes",
          "status": "passed",
          "title": "should update derived stores when parent store changes",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "isFlagEnabled utility"],
          "fullName": " Flag Store isFlagEnabled utility should return a derived store for boolean flags",
          "status": "passed",
          "title": "should return a derived store for boolean flags",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "isFlagEnabled utility"],
          "fullName": " Flag Store isFlagEnabled utility should work with all boolean flags",
          "status": "passed",
          "title": "should work with all boolean flags",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "isFlagEnabled utility"],
          "fullName": " Flag Store isFlagEnabled utility should convert non-boolean values to boolean",
          "status": "passed",
          "title": "should convert non-boolean values to boolean",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "isFlagEnabled utility"],
          "fullName": " Flag Store isFlagEnabled utility should update when flag values change",
          "status": "passed",
          "title": "should update when flag values change",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "getCurrentFlags utility"],
          "fullName": " Flag Store getCurrentFlags utility should return current flag values",
          "status": "passed",
          "title": "should return current flag values",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "getCurrentFlags utility"],
          "fullName": " Flag Store getCurrentFlags utility should return updated values after store changes",
          "status": "passed",
          "title": "should return updated values after store changes",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "getCurrentFlags utility"],
          "fullName": " Flag Store getCurrentFlags utility should return a snapshot of current state",
          "status": "passed",
          "title": "should return a snapshot of current state",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "store integration"],
          "fullName": " Flag Store store integration should maintain consistency across all derived stores",
          "status": "passed",
          "title": "should maintain consistency across all derived stores",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "store integration"],
          "fullName": " Flag Store store integration should handle rapid updates correctly",
          "status": "passed",
          "title": "should handle rapid updates correctly",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "store integration"],
          "fullName": " Flag Store store integration should handle partial updates correctly",
          "status": "passed",
          "title": "should handle partial updates correctly",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "edge cases"],
          "fullName": " Flag Store edge cases should handle undefined values gracefully",
          "status": "passed",
          "title": "should handle undefined values gracefully",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Flag Store", "edge cases"],
          "fullName": " Flag Store edge cases should handle multiple subscribers correctly",
          "status": "passed",
          "title": "should handle multiple subscribers correctly",
          "duration": 2,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394354,
      "endTime": 1759492394380,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/flags/store.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": " Error Boundary Integration Tests Error Handling Functions should handle page reload functionality",
          "status": "passed",
          "title": "should handle page reload functionality",
          "duration": 3,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": " Error Boundary Integration Tests Error Handling Functions should handle navigation to home",
          "status": "passed",
          "title": "should handle navigation to home",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": " Error Boundary Integration Tests Error Handling Functions should handle log export functionality",
          "status": "passed",
          "title": "should handle log export functionality",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": " Error Boundary Integration Tests Error Handling Functions should handle log export errors gracefully",
          "status": "passed",
          "title": "should handle log export errors gracefully",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Error Handling Functions"],
          "fullName": " Error Boundary Integration Tests Error Handling Functions should prevent multiple simultaneous log exports",
          "status": "passed",
          "title": "should prevent multiple simultaneous log exports",
          "duration": 101,
          "failureMessages": []
        },
        {
          "ancestorTitles": [
            "",
            "Error Boundary Integration Tests",
            "Error Information Processing"
          ],
          "fullName": " Error Boundary Integration Tests Error Information Processing should generate detailed error information",
          "status": "passed",
          "title": "should generate detailed error information",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": [
            "",
            "Error Boundary Integration Tests",
            "Error Information Processing"
          ],
          "fullName": " Error Boundary Integration Tests Error Information Processing should handle missing error information gracefully",
          "status": "passed",
          "title": "should handle missing error information gracefully",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Download Functionality"],
          "fullName": " Error Boundary Integration Tests Download Functionality should generate correct filename with current date",
          "status": "passed",
          "title": "should generate correct filename with current date",
          "duration": 0,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Download Functionality"],
          "fullName": " Error Boundary Integration Tests Download Functionality should handle download errors gracefully",
          "status": "passed",
          "title": "should handle download errors gracefully",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Integration Scenarios"],
          "fullName": " Error Boundary Integration Tests Integration Scenarios should handle complete error boundary workflow",
          "status": "passed",
          "title": "should handle complete error boundary workflow",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Error Boundary Integration Tests", "Integration Scenarios"],
          "fullName": " Error Boundary Integration Tests Integration Scenarios should handle rapid user interactions without issues",
          "status": "passed",
          "title": "should handle rapid user interactions without issues",
          "duration": 0,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394754,
      "endTime": 1759492394876,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/integration/error-boundary.int.spec.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "NDJSON Export"],
          "fullName": " Log Export Integration Tests NDJSON Export should export logs as NDJSON blob",
          "status": "passed",
          "title": "should export logs as NDJSON blob",
          "duration": 28,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "NDJSON Export"],
          "fullName": " Log Export Integration Tests NDJSON Export should export empty logs when no logs are present",
          "status": "passed",
          "title": "should export empty logs when no logs are present",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "NDJSON Export"],
          "fullName": " Log Export Integration Tests NDJSON Export should include proper NDJSON formatting",
          "status": "passed",
          "title": "should include proper NDJSON formatting",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "NDJSON Export"],
          "fullName": " Log Export Integration Tests NDJSON Export should handle multiple log entries correctly",
          "status": "passed",
          "title": "should handle multiple log entries correctly",
          "duration": 5,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Download Functionality"],
          "fullName": " Log Export Integration Tests Download Functionality should trigger download with correct filename",
          "status": "passed",
          "title": "should trigger download with correct filename",
          "duration": 9,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Download Functionality"],
          "fullName": " Log Export Integration Tests Download Functionality should generate filename with current date",
          "status": "passed",
          "title": "should generate filename with current date",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Download Functionality"],
          "fullName": " Log Export Integration Tests Download Functionality should handle download errors gracefully",
          "status": "passed",
          "title": "should handle download errors gracefully",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "PII Redaction in Exports"],
          "fullName": " Log Export Integration Tests PII Redaction in Exports should redact sensitive information in exported logs",
          "status": "passed",
          "title": "should redact sensitive information in exported logs",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "PII Redaction in Exports"],
          "fullName": " Log Export Integration Tests PII Redaction in Exports should preserve allowed data fields in exports",
          "status": "passed",
          "title": "should preserve allowed data fields in exports",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "PII Redaction in Exports"],
          "fullName": " Log Export Integration Tests PII Redaction in Exports should handle nested objects in data field",
          "status": "passed",
          "title": "should handle nested objects in data field",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Memory Management"],
          "fullName": " Log Export Integration Tests Memory Management should respect memory limits during export",
          "status": "passed",
          "title": "should respect memory limits during export",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Memory Management"],
          "fullName": " Log Export Integration Tests Memory Management should handle large exports efficiently",
          "status": "passed",
          "title": "should handle large exports efficiently",
          "duration": 4,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Error Handling"],
          "fullName": " Log Export Integration Tests Error Handling should handle export errors gracefully",
          "status": "passed",
          "title": "should handle export errors gracefully",
          "duration": 2,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Error Handling"],
          "fullName": " Log Export Integration Tests Error Handling should handle corrupted log data",
          "status": "passed",
          "title": "should handle corrupted log data",
          "duration": 1,
          "failureMessages": []
        },
        {
          "ancestorTitles": ["", "Log Export Integration Tests", "Integration with Error Boundary"],
          "fullName": " Log Export Integration Tests Integration with Error Boundary should work correctly when called from error boundary",
          "status": "passed",
          "title": "should work correctly when called from error boundary",
          "duration": 2,
          "failureMessages": []
        }
      ],
      "startTime": 1759492394062,
      "endTime": 1759492394129,
      "status": "passed",
      "message": "",
      "name": "/home/edgar_dev/game-dev/dragonChronicles/tests/integration/export-logs.int.spec.ts"
    }
  ]
}

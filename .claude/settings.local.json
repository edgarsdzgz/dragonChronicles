{
  "permissions": {
    "allow": [
      "Bash(pnpm:*)",
      "Bash(npm install:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git switch:*)",
      "Bash(mkdir:*)",
      "Bash(tsc -v)",
      "Bash(./node_modules/.bin/tsc:*)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(node:*)",
      "Bash(echo $?)",
      "Bash(npm run test:all:*)",
      "Bash(npm run build:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run typecheck:*)",
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(BUILD_ONCE=1 node tests/test-unit-shared.mjs)",
      "Bash(gh pr create:*)",
      "Bash(echo $PATH)",
      "Bash(winget install:*)",
      "Bash(./bin/gh.exe:*)",
      "Bash(/c/Users/ediaz/Downloads/github-cli/bin/gh.exe issue create --title \"Centralize Game Documentation: Developer & Player Dual Structure\" --body \"$(cat <<''EOF''\n## Overview\n\nCreate a centralized documentation system with dual audiences: **developers/LLMs** and **players**. This addresses the current scattered documentation state and provides a foundation for comprehensive game documentation.\n\n## Current State Analysis\n\n### Existing Documentation\n- ✅ `Draconia_Chronicles_v2_GDD.md` (463 lines) - Comprehensive game design\n- ✅ `CLAUDE.md` - Development guidelines and processes  \n- ✅ `tests/README.md` - Test suite documentation\n- ✅ Legacy docs in `LEGACY_v1.0.1/docs/` - Technical specifications\n- ❌ **Missing**: Player guides, API docs, setup guides, architecture docs\n\n### Problems to Solve\n1. **Scattered documentation** across multiple files and locations\n2. **No player-facing help system** for game mechanics and strategies\n3. **Mixed audiences** in single documents (technical + player content)\n4. **No clear navigation** or discovery system\n5. **Legacy documentation** needs integration or archival\n\n## Proposed Solution\n\n### `/docs/` Directory Structure\n\n```\ndocs/\n├── README.md                    # Main documentation index & navigation\n├── dev/                        # 🔧 Developer & LLM focused docs\n│   ├── README.md               # Dev docs index\n│   ├── setup/                  # Development environment setup\n│   │   ├── getting-started.md  # Quick start for new developers  \n│   │   ├── development.md      # Full dev environment setup\n│   │   └── architecture.md     # System architecture overview\n│   ├── api/                    # Code documentation\n│   │   ├── packages/           # Per-package API docs\n│   │   ├── workers/            # Web worker interfaces\n│   │   └── schemas/            # Data schemas & types\n│   ├── processes/              # Development processes\n│   │   ├── workflow.md         # Git workflow, PR process\n│   │   ├── testing.md          # Testing strategy & guidelines  \n│   │   └── deployment.md       # Build & deployment procedures\n│   └── design/                 # Technical design docs\n│       ├── gdd.md              # Game Design Document\n│       ├── performance.md      # Performance considerations\n│       └── security.md         # Security guidelines\n└── player/                     # 🎮 Player-facing documentation\n    ├── README.md               # Player help index\n    ├── getting-started.md      # New player onboarding\n    ├── gameplay/               # Game mechanics & guides\n    │   ├── combat.md           # Combat system guide\n    │   ├── progression.md      # Progression mechanics  \n    │   ├── enchants.md         # Enchantment system\n    │   └── offline.md          # Offline progression\n    ├── guides/                 # Strategy & tips\n    │   ├── beginners-guide.md  # Beginner strategies\n    │   ├── advanced-tips.md    # Advanced techniques\n    │   └── troubleshooting.md  # Common issues & solutions\n    └── reference/              # Quick reference\n        ├── hotkeys.md          # Keyboard shortcuts\n        ├── settings.md         # Game settings guide\n        └── data-export.md      # Save management\n```\n\n## Implementation Plan\n\n### Phase 1: Foundation Setup\n- [ ] Create `/docs/` directory structure with README navigation\n- [ ] Move `Draconia_Chronicles_v2_GDD.md` → `docs/dev/design/gdd.md` \n- [ ] Create documentation index with clear audience separation\n- [ ] Establish content templates and style guidelines\n\n### Phase 2: Developer Documentation Migration  \n- [ ] Migrate `CLAUDE.md` → `docs/dev/processes/workflow.md`\n- [ ] Expand `tests/README.md` → `docs/dev/processes/testing.md`\n- [ ] Create architecture documentation from codebase analysis\n- [ ] Document package APIs and worker interfaces\n\n### Phase 3: Player Documentation Creation\n- [ ] Extract game mechanics from GDD into player-friendly guides\n- [ ] Create beginner onboarding flow and quick start guide\n- [ ] Write comprehensive gameplay guides (combat, progression, enchants)\n- [ ] Develop troubleshooting guides and quick reference materials\n\n### Phase 4: Integration & Automation\n- [ ] Integrate legacy documentation or archive obsolete content\n- [ ] Set up documentation generation/validation in CI/CD\n- [ ] Create documentation review process and maintenance guidelines\n- [ ] Add in-game help links to documentation (future)\n\n## Content Strategy\n\n### 🔧 Developer/LLM Documentation\n- **Technical depth**: Architecture diagrams, API references, implementation details\n- **Process focus**: Development workflows, testing strategies, deployment procedures  \n- **Code integration**: Auto-generated API docs, inline code examples\n- **Living documents**: Updated automatically with code changes\n\n### 🎮 Player Documentation  \n- **Accessibility first**: Clear language, progressive disclosure of complexity\n- **Goal-oriented**: Task-focused guides, problem-solving approach\n- **Visual aids**: Screenshots, flowcharts, example scenarios when helpful\n- **Beginner-friendly**: Assumes no prior knowledge, builds up complexity gradually\n\n## Success Criteria\n\n### Developer Experience\n- [ ] New developers can set up environment in <30 minutes using docs\n- [ ] All packages have API documentation with examples\n- [ ] Development processes are clearly documented and discoverable\n- [ ] Architecture is well-documented for LLM context\n\n### Player Experience  \n- [ ] New players have clear onboarding path\n- [ ] Game mechanics are explained in accessible language\n- [ ] Common questions/issues have documented solutions\n- [ ] Advanced players have strategy guides and references\n\n### Maintenance\n- [ ] Documentation stays up-to-date with automated checks\n- [ ] Clear ownership and review process for doc changes\n- [ ] Templates make it easy to add new documentation\n- [ ] Analytics show documentation is being used effectively\n\n## Migration Notes\n\n### Files to Relocate\n- `Draconia_Chronicles_v2_GDD.md` → `docs/dev/design/gdd.md`\n- `CLAUDE.md` → `docs/dev/processes/workflow.md` (with adaptation)\n- `tests/README.md` → `docs/dev/processes/testing.md` (expanded)\n- Legacy docs: Review and integrate/archive as appropriate\n\n### New Content Needed\n- Architecture overview and system diagrams\n- Package API documentation  \n- Player onboarding and gameplay guides\n- Troubleshooting and FAQ sections\n- Quick reference materials for common tasks\n\n## Future Enhancements\n- Interactive documentation with code examples\n- In-game help system linking to documentation\n- Community-contributed guides and strategies\n- Automated screenshot generation for UI documentation\n- Multi-language support for player documentation\n\n---\n\n**Priority**: High - Documentation is critical for project maintainability and player experience  \n**Estimate**: 2-3 implementation phases over multiple sprints\n**Dependencies**: None - can start immediately with foundation setup\nEOF\n)\")"
    ],
    "deny": []
  }
}
// MVP 1.1 Decimal wrapper - dynamic import approach for break_eternity.js
let Decimal: any;

// Initialize synchronously if possible, or provide fallback
try {
  // Use require for CommonJS compatibility during SSR
  const breakEternity = require('break_eternity.js');
  Decimal = breakEternity.default || breakEternity;
} catch (error) {
  console.warn('Failed to load break_eternity.js via require:', error);
  
  // Fallback to simple number wrapper for SSR
  Decimal = class DecimalFallback {
    constructor(value: any) {
      this.value = Number(value) || 0;
    }
    
    toString() { return this.value.toString(); }
    toNumber() { return this.value; }
    toFixed(digits: number) { return this.value.toFixed(digits); }
    
    isFinite() { return Number.isFinite(this.value); }
    isZero() { return this.value === 0; }
    lt(other: any) { return this.value < Number(other); }
    gt(other: any) { return this.value > Number(other); }
    lte(other: any) { return this.value <= Number(other); }
    gte(other: any) { return this.value >= Number(other); }
    eq(other: any) { return this.value === Number(other); }
    
    mul(other: any) { return new DecimalFallback(this.value * Number(other)); }
    div(other: any) { return new DecimalFallback(this.value / Number(other)); }
    add(other: any) { return new DecimalFallback(this.value + Number(other)); }
    sub(other: any) { return new DecimalFallback(this.value - Number(other)); }
    plus(other: any) { return this.add(other); }
    minus(other: any) { return this.sub(other); }
    
    abs() { return new DecimalFallback(Math.abs(this.value)); }
    neg() { return new DecimalFallback(-this.value); }
    log10() { return new DecimalFallback(Math.log10(this.value)); }
    floor() { return new DecimalFallback(Math.floor(this.value)); }
    ceil() { return new DecimalFallback(Math.ceil(this.value)); }
    sqrt() { return new DecimalFallback(Math.sqrt(this.value)); }
    
    static pow(base: any, exponent: any) {
      return new DecimalFallback(Math.pow(Number(base), Number(exponent)));
    }
  };
}

// Successfully resolved CommonJS import compatibility with fallback pattern

// Re-export for convenience
export { Decimal };
export default Decimal;
var y=Object.defineProperty;var w=(r,e,t)=>e in r?y(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var s=(r,e,t)=>w(r,typeof e!="symbol"?e+"":e,t);import{h as g}from"./DzhVMzrA.js";import{T as x,R as p,S as F}from"./B2cBvE-Z.js";import{A as P}from"./D5Hk05_A.js";function v(r,e){return r==null?null:String(r)}function E(r,e,t,i){var a=r.__style;if(g||a!==e){var n=v(e);(!g||n!==r.getAttribute("style"))&&(n==null?r.removeAttribute("style"):r.style.cssText=n),r.__style=e}return i}class I{constructor(e){s(this,"baseTexture",null);s(this,"frames",new Map);s(this,"config");s(this,"initialized",!1);this.config=e}async initialize(){if(!(this.initialized||typeof window>"u"))try{if(console.log(`Loading texture using Assets API: ${this.config.imagePath}`),this.baseTexture=await P.load(this.config.imagePath),!this.baseTexture)throw new Error(`Failed to load texture: ${this.config.imagePath}`);console.log(`Texture loaded successfully: ${this.config.imagePath}`,{width:this.baseTexture.width,height:this.baseTexture.height,valid:this.baseTexture.valid,source:this.baseTexture.source}),this.generateFrames(this.config),this.initialized=!0,console.log(`TextureAtlas initialized: ${this.config.imagePath} (${this.frames.size} frames)`)}catch(e){throw console.error("Failed to initialize TextureAtlas:",e),console.error("Error details:",{message:e.message,stack:e.stack,imagePath:this.config.imagePath}),e}}generateFrames(e){if(!this.baseTexture)return;const{frameWidth:t,frameHeight:i,rows:a,cols:n,spacing:h=0}=e;for(let o=0;o<a;o++)for(let l=0;l<n;l++){const c=l*(t+h),u=o*(i+h),d=`${o}_${l}`,m={texture:new x({source:this.baseTexture.source,frame:new p(c,u,t,i)}),x:c,y:u,width:t,height:i};this.frames.set(d,m)}}async getFrame(e,t){return await this.initialize(),this.frames.get(`${e}_${t}`)}async getFrameByIndex(e){await this.initialize();const t=this.config,i=Math.floor(e/t.cols),a=e%t.cols;return this.getFrame(i,a)}async getAllFrames(){return await this.initialize(),Array.from(this.frames.values())}async getFrameCount(){return await this.initialize(),this.frames.size}}const $=new I({imagePath:"/sprites/dragon_fly_128_sheet.svg",frameWidth:128,frameHeight:128,rows:2,cols:2});class A{constructor(e,t,i){s(this,"sprite");s(this,"isPlaying",!1);s(this,"currentFrameIndex",0);s(this,"intervalId",null);s(this,"frameSequence",["idle","fly_1","fly_2","fly_3"]);s(this,"frameDuration",125);s(this,"renderer",null);s(this,"stage",null);this.sprite=e,this.renderer=t||null,this.stage=i||null}async start(){this.isPlaying||(this.isPlaying=!0,await this.updateFrame(),this.intervalId=window.setInterval(async()=>{this.isPlaying&&(this.currentFrameIndex=(this.currentFrameIndex+1)%this.frameSequence.length,await this.updateFrame())},this.frameDuration))}stop(){this.isPlaying=!1,this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null)}pause(){this.isPlaying=!1,this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null)}resume(){this.isPlaying||this.start()}async updateFrame(){try{const e=this.frameSequence[this.currentFrameIndex],t=await f(e);if(t){if(this.sprite.texture=t.texture,console.log(`Dragon frame updated to: ${e}`,{textureValid:t.texture?.source?.valid,textureWidth:t.texture?.width,textureHeight:t.texture?.height}),this.renderer&&this.stage)this.renderer.render(this.stage);else if(this.sprite.stage&&"renderer"in this.sprite.stage){const i=this.sprite.stage;i.renderer&&i.renderer.render(i)}}else console.warn(`Failed to load frame: ${e}`)}catch(e){console.error("Error updating dragon frame:",e)}}getCurrentFrame(){return this.frameSequence[this.currentFrameIndex]}isAnimating(){return this.isPlaying}setFPS(e){if(e<=0){console.warn("FPS must be greater than 0");return}this.frameDuration=1e3/e,console.log(`Dragon animation FPS changed to: ${e} (${this.frameDuration}ms per frame)`),this.isPlaying&&(this.stop(),this.start())}getFPS(){return 1e3/this.frameDuration}destroy(){this.stop()}}const T={idle:{row:0,col:0},fly_1:{row:0,col:1},fly_2:{row:1,col:0},fly_3:{row:1,col:1}};async function f(r){try{const{row:e,col:t}=T[r],i=await $.getFrame(e,t);if(!i){console.error(`Failed to get dragon frame: ${r} (${e}, ${t})`);return}return i}catch(e){console.error(`Error loading dragon frame ${r}:`,e);return}}async function _(r="idle"){const e=await f(r);if(!e)throw new Error(`Invalid dragon frame type: ${r}`);const t=new F(e.texture);return t.anchor.set(.5),t}async function q(r,e){const t=await _("idle"),i=new A(t,r,e);return{sprite:t,animator:i}}export{I as T,q as c,f as g,E as s};
